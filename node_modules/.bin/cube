#!/usr/bin/env node
var debug = require('debug')('cube:cli');
var cmd = require('commander');
var Cube = require('../index');
var fs = require('xfs');
var path = require('path');
var JsProcessor = require('../lib/processor_js');
var pkg = require(path.join(__dirname, '../package'));
var spawn = require('child_process').spawn;

function exec(cmd, cb) {
  var args = cmd.split(/\s/);
  cmd = spawn(args[0], args.slice(1), process.env);
  cmd.stdout.on('data', function (data) {
    console.log(data.toString());
  });
  cmd.stdout.on('error', function (data) {
    console.log(data.toString());
  });

  cmd.stderr.on('data', function (data) {
    console.log(data.toString());
  });
  cmd.stderr.on('error', function (data) {
    console.log(data.toString());
  });

  cmd.on('close', cb);
}


function getCwd() {
  return process.cwd();
}
/** find cube.js **/
function findCube(cb) {
  var base = getCwd();
  debug('find cube file: %s', base);
  var tar = [];
  fs.walk(base, function (err, file) {
    if (/(\/node_modules\/|\/\.git)/.test(file)) {
      return ;
    }
    var filename = path.basename(file);
    if (/^cube\.(min\.)?js$/.test(filename)) {
      tar.push(file);
    }
  }, function () {
    if (tar.length > 1) {
      console.log('[ERROR] more then one cube founded!', tar);
      return cb(null);
    } else if (!tar.length) {
      console.log('[]ERROR] cube not found');
      return cb(null);
    }
    cb(tar[0]);
  });
}

function optmizeInfo() {
  console.log('[INFO] you can custom cube.min.js file, i.e : css_runtime');
}
function filePath(file) {
  var base = getCwd();
  return path.join(base, file);
}
function checkFile(file) {
  return fs.existsSync(filePath(file));
}
function sourcePath(file) {
  var base = __dirname;
  return path.join(base, '../', file);
}

function buildOutput(err, info) {
  console.log('==================');
  console.log('Files:', info.total, 'Cost:', info.time + 's');
  if (err.length) {
    console.log('Error:', err.length);
    err.forEach(function (e) {
      console.log('\t*', e.code, e.message);
    });
  } else {
    console.log('Build successfully');
  }
  console.log('==================');
}

cmd.version('v' + pkg.version);

function run() {
  var argv = Array.prototype.slice.call(arguments);
  var args = argv.pop();
  var dir = argv[0];
  var processors;
  if (args.processors) {
    processors = args.processors.split(',');
  }
  Cube.init({
    root: path.join(process.cwd(), dir || ''),
    port: args.port ? args.port : 9999,
    router: args.vpath || '/',
    processors: processors,
    resBase: args.resbase,
    remote: args.remote,
    middleware: false
  });
}

cmd.command('run')
  .alias('start')
  .description('start server, @deprecate, using `cube start`')
  .option('-b, --base [value]', 'the http virtual base, i.e `http://static.taobao.com/res/js/`, base -> `/res/js/`')
  .option('-p, --processors [value]', 'the external processors')
  .option('-P, --port [value]', 'server port')
  .option('-r, --resbase [value]', 'set the http base path for resourcs')
  .option('-R, --remote [value]', 'set remote option')
  .option('-o, --output [value]', 'output dir')
  .action(run);

cmd.command('init')
  .description('init project')
  .option('--jade', 'with jade runtime')
  .option('--ejs', 'with ejs runtime')
  .option('--css', 'with dynamic css load support')
  .option('-f, --force', 'force update cube.min.js')
  .action(function (option) {
    // TODO init project
    // copy cube.js
    if (!checkFile('./cube.min.js') || option.force) {
      var codeCube = fs.readFileSync(sourcePath('./runtime/cube.min.js')).toString();
      if (option.css) {
        console.log('enable mcss');
        codeCube += '\n//cube_css.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube_css.min.js'));
        optmizeInfo();
      }
      fs.sync().save(filePath('./cube.min.js'), codeCube);

      if (option.jade) {
        console.log('enable jade');
        codeCube = '\n//jade_runtime\n' + fs.readFileSync(sourcePath('./runtime/jade_runtime.min.js'));
        fs.sync().save(filePath('./node_modules/jade_runtime.js'), codeCube);
      }
      if (option.ejs) {
        console.log('enable ejs');
        codeCube = '\n//ejs_runtime\n' + fs.readFileSync(sourcePath('./runtime/ejs_runtime.min.js'));
        fs.sync().save(filePath('./node_modules/ejs_runtime.js'), codeCube);
      }
      console.log('inited cube.min.js');
    } else {
      console.log('file already exist: ./cube.min.js');
    }
    if (!checkFile('./start.html')) {
      fs.sync().save(filePath('./start.html'), fs.readFileSync(sourcePath('./runtime/start.html')));
      console.log('inited start.html');
    } else {
      console.log('file already exist: ./start.html');
    }
    if (!checkFile('./cube.json')) {
      fs.sync().save(filePath('./cube.json'), fs.readFileSync(sourcePath('./runtime/cube.json')));
      console.log('inited cube.json');
    } else {
      console.log('file already exist: ./cube.json');
    }
    if (!checkFile('./main.js')) {
      fs.sync().save(filePath('./main.js'),
        'document.getElementById("msg").innerHTML = "hello, Cube";\n' +
        'document.getElementById("show").value = document.getElementById("initscript").innerHTML;\n' +
        'exports.run = function () {console.log("app started!")};'
      );
      console.log('inited main.js');
    } else {
      console.log('file already exist: ./main.js');
    }
    fs.sync().mkdir('test');

    console.log('successfully inited');
  });

cmd.command('install')
  .description('install dependences')
  .action(function (option, dir) {
    dir = dir ? filePath(dir) : getCwd();
    var cubeCfg;
    try {
      cubeCfg = require(path.join(dir, 'cube.json'));
    } catch (e) {
      console.log('nothing need to install');
      return;
    }
    var deps = cubeCfg.deps || cubeCfg.dependencies;
    if (!deps) {
      return;
    }
    var pkgList = [];
    Object.keys(deps).forEach(function (v) {
      pkgList.push(v + '@' + deps[v]);
    });
    exec('npm install ' + pkgList.join(' '), function (code) {
      console.log('install ended', code);
    });
  });

cmd.command('update')
  .description('update cube.min.js')
  .option('--min', 'simple cube.min.js, no other run_time inculde')
  .action(function (option) {
    findCube(function (cubeFile) {
      if (!cubeFile) {
        return;
      }
      var codeCube = '//cube.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube.min.js')).toString();
      if (!option.min) {
        console.log('enabled jade');
        codeCube += '\n//jade_runtime\n' + fs.readFileSync(sourcePath('./runtime/jade_runtime.min.js'));
        console.log('enabled ejs');
        codeCube += '\n//ejs_runtime\n' + fs.readFileSync(sourcePath('./runtime/ejs_runtime.min.js'));
        console.log('enabled mcss');
        codeCube += '\n//cube_css.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube_css.min.js'));
        optmizeInfo();
      }
      fs.sync().save(cubeFile, codeCube);
      console.log(cubeFile, 'updated');
    });
  });

cmd.command('build')
  /**
   * source , -o,--output, -b, --base 是基于cwd路径, 互相之间没有依赖关系
   */
  .usage('-p processor1,processor2 your_code_dir')
  .description('build the hole project, including: less->css->min, script->wraped->min')
  .option('-p, --processors [value]', 'build in modules, tell cube ignore them')
  .option('-o, --output [value]', 'set the output path')
  .option('-b, --base [value]', 'set the cube base')
  .option('-r, --resbase [value]', 'the http base for resouce')
  .option('--remote [value]', 'set the namespace for remote call')
  .option('--merge', 'if merged dependences into on file')
  .option('--with-source', 'create source file')
  .option('--without-compress', 'do not compress code, output the source with wrap')
  .action(function (source, args) {
    if (!args || !source) {
      this.help();
      return;
    }
    if (args.processors) {
      args.processors = args.processors.split(',');
      args.processors.forEach(function (v, i, a) {
        a[i] = v.trim();
      });
    }

    var cwd = getCwd();
    var fstat;
    var inputPath, outputPath, cube, tool, root;
    var compress = args.withoutCompress ? false : true;

    root = args.base ? args.base : '';
    if (root) {
      root = /^\//.test(root) ? root : path.join(cwd, root);
    }
    source = /^\//.test(source) ? source : path.join(cwd, source);
    inputPath = source;
    try {
      fstat = fs.statSync(source);
    } catch (e) {
      console.log('source not fould', e);
      this.help();
      return;
    }

    if (fstat.isFile()) {
      outputPath = args.output ? (args.output.indexOf('/') === 0 ? args.output : path.join(cwd, args.output)) : source.replace(/\.(\w+)$/, '.min.$1');
      root = (root ? root : path.dirname(source)).replace(/(\/|\\)$/, '');
      cube = new Cube({
        release: true,
        root: root,
        compress: compress,
        middleware: false,
        processors: args.processors,
        resBase: args.resbase,
        remote: args.remote
      });
      tool = Cube.getTool();
      tool.processFile(cube, source, outputPath, {withSource: args.withSource}, buildOutput);
    } else if (fstat.isDirectory()) {
      outputPath = args.output ? (args.output.indexOf('/') === 0 ? args.output : path.join(cwd, args.output)) : (source.replace(/(\/|\\)$/, '') + '.release');
      root = (root ? root : source).replace(/(\/|\\)$/, '');
      cube = new Cube({
        release: true,
        root: root,
        compress: compress,
        middleware: false,
        processors: args.processors,
        resBase: args.resbase,
        remote: args.remote
      });
      tool = Cube.getTool();
      tool.processDir(cube, inputPath, outputPath, {withSource: args['with-source']}, buildOutput);
    } else {
      console.log('unknow type input source', source);
    }
  });

cmd.command('dag')
  .usage('your_code_dir')
  .description('gen DAG graph')
  .action(function (tar) {
    var source = path.join(getCwd(), tar);
    if (/(\/|\\)$/.test(source)) {
      source = source.substr(0, source.length - 1);
    }
    var stat = fs.statSync(source);
    var root;
    var flagFile = false;
    if (stat.isFile()) {
      flagFile = true;
      root = path.dirname(source);
    } else {
      root = source;
    }
    var cube = new Cube({
      root: root
    });
    var processor = new JsProcessor(cube);

    // var stat = fs.statSync(source);
    if (flagFile) {
      source = path.basename(source);
      processor.process(source, {root: root, moduleWrap: true}, function (err, data) {
        end();
      });
    } else {
      fs.walk(source, /\.(js|coffee)$/, function (err, file, done) {
        if (err) {
          console.log('make dag error', err);
          process.exit(1);
        }
        file = file.substr(root.length);
        processor.process(file, {root: root, moduleWrap: true}, function (err, data) {
          done();
        });
      }, end);
    }

    function end() {
      // done
      var requires = JsProcessor.requires;
      var res = [];
      // {source: "Samsung", target: "Apple", type: "suit"}
      for (var i in requires) {
        requires[i].forEach(function (v) {
          res.push({source: i, target: v, type: 'suit'});
        });
      }
      var fstr = fs.readFileSync(path.join(__dirname, '../res/dag.html')).toString();
      fstr = fstr.replace(/\$\$\$_\$\$\$/, JSON.stringify(res));
      fs.sync().save(path.join(root, './dag_out.html'), fstr);
      console.log('browser open: ' + root + '/dag_out.html');
    }
  });

cmd.command('help')
  .description('help')
  .action(function () {
    cmd.help();
  });

cmd.parse(process.argv);

if (!cmd.args.length) {
  cmd.help();
}



