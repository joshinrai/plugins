'use strict';
/*
jquery leaflet
 */

var $ = require('jquery');
var L = require('./../index').L;
var Utils = L.Utils;
var isPtInPolygons = Utils.isPtInPolygons;
var getFeatureBBox =Utils.getFeatureBBox;
var isPtInBound = Utils.isPtInBound;
var demo = require('./demo2d');
var Model = require('./../model/model');
var getBoundByFile = Model.getBoundByFile;
var genIsPolygonInFeature = Utils.genIsPolygonInFeature;

function genRandomPts(lat0, lng0, r){
  var lat = lat0 + (Math.random() - 0.5) * r;
  var lng = lng0 + (Math.random() - 0.5) * r;
  return {'lng':lng, 'lat':lat};
}


function Containment(container){
  var clat = 48.40732607972984;
  var clng = 127.46337890625001;
  var r = 10;
  var self = this;
  var map = this.map = demo(container);
  map.setView(L.latLng(clat, clng), 6);
  getBoundByFile(230000, function(d){
    var list = [];
    for(var k = 0; k< 200; k++){
      var pt = genRandomPts(clat, clng, r);
      list.push(pt);
    }
    self.byDraw(list, d);
  });
  this.boundary();
}
Containment.prototype.boundary = function() {
  L.Areas.area(230000, {
    map: this.map,
    mode: 'file',
    mDown: function (e) {
      var layer = e.target || {};
      var feature = layer.feature || {};
      var geometry = feature.geometry || {};
      var coordinates = geometry.coordinates;
      var latlng = e.latlng || {};
      if (!(coordinates && latlng)) {
        return;
      }
      var clickPt = [latlng.lng, latlng.lat];
      var bol = isPtInPolygons(clickPt, coordinates);
      var bbox = getFeatureBBox(feature);
      var inBboxBol = isPtInBound(clickPt, bbox);
      console.log('，点在边界内部：' + bol, '，点在bbox内部：' + inBboxBol);
    }
  });
};

Containment.prototype.byMath = function(list, d) {
    var coordinates = d.geometry.coordinates;
    for(var k in list){
      var pt = list[k];
      var bol = isPtInPolygons(pt, coordinates);
      if(bol){
        var latlng = L.latLng(pt.lat, pt.lng);
        L.marker(latlng).addTo(this.map);
      }
    }
};

Containment.prototype.byDraw = function(list, d) {
  var self = this;
  var isPtInPolygons = genIsPolygonInFeature(d);
  for(var k in list){
    var pt = list[k];
    if(isPtInPolygons(pt)){
      var latlng = L.latLng(pt.lat, pt.lng);
      L.marker(latlng).addTo(self.map);
    }
  }
};

module.exports = Containment;