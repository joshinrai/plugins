'use strict';
var $ = require('jquery');
var THREE = require('three');

function Globe(obj) {
  obj = obj || {};
  this.three3D = obj.three3D;
  this._r = obj.r || 1;
  this._intensity = obj.intensity || 3.0;
  this._maxOpacity = obj.maxOpacity || 0.12;
  this._atmosphere = obj.atmosphere;
  this.init(obj);
}

/**
 * init 初始化
 * @param  {Object} obj 配置
 */
Globe.prototype.init = function (obj) {
  var three3D = this.three3D;
  var mat = obj.mat || '3d.real';

  //开始建立模型
  var geo = new THREE.SphereGeometry(this._r, 60, 60);
  mat = this.genMaterial(mat);
  var mesh = this.earth = new THREE.Mesh(geo, mat);
  three3D.add(mesh);
  if(this._atmosphere){//是否要大气层
    this.genAtmosphere();
  }
};

/**
 * genMaterial 生成地球表面的贴图
 * @param  {Object/String} matType 贴图配置或贴图类型
 */
Globe.prototype.genMaterial = function (mat) {
  if (!mat) {
    return new THREE.MeshBasicMaterial();
  }

  var matTypes;
  var matOpt = {
  };
  if (typeof (mat) === 'string') {
    matTypes = mat.split('.');
  }else if (typeof (mat) === 'object') {
    var matType = mat.type;
    matTypes = matType.split('.');
    if (mat.opacity || mat.opacity === 0) {
      matOpt.transparent = 1;
      matOpt.opacity = mat.opacity;
    }
    matOpt = $.extend(matOpt, {
      'color': mat.color || 0xffffff
    });
  }

  if (matTypes[0] === '3d') {
    var matOpt3d = $.extend(matOpt, {
      'specular': 0x222222,
      'bumpScale': 1,
      'shininess': 15,
      'normalScale': new THREE.Vector2(1.5, 1.5),
      'wrapRGB': new THREE.Vector3(0.99, 0.99, 0.99),
      'combine': THREE.AddOperation,
      'wrapAround': true,
      'wireframeLinecap': 'round',
      // 'blending': THREE.CustomBlending
    });
    if (matTypes[1] === 'real') { //彩色
      matOpt3d = $.extend(matOpt3d, {
        'map': THREE.ImageUtils.loadTexture('./../mapping/3/earth.topo.bathy.200407.3x4096x2048.jpg'),
        'specularMap': THREE.ImageUtils.loadTexture('./../mapping/3/earth_specularmap_flat_4096x2048.jpg'),
        'normalMap': THREE.ImageUtils.loadTexture('./../mapping/3/earth_normalmap_flat_4096x2048.jpg'),
        'bumpMap': THREE.ImageUtils.loadTexture('./../mapping/3/earth_bumpmap_flat_4096x2048.jpg')
      });
    } else if (matTypes[1] === 'dark') {//暗色
      matOpt3d = $.extend(matOpt3d, {
        'map': THREE.ImageUtils.loadTexture('./../mapping/1/earth.topo.bathy.200407.3x4096x2048.dark.jpg'),
        'specularMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_specularmap_flat_8192x4096.jpg'),
        'normalMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_normalmap_flat_8192x4096.jpg'),
        'bumpMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_bumpmap_flat_8192x4096aa.jpg')
      });
    } else if (matTypes[1] === 'light') { //亮色
      matOpt3d = $.extend(matOpt3d, {
        'map': THREE.ImageUtils.loadTexture('./../mapping/1/earth.topo.bathy.200407.3x4096x2048.light.jpg'),
        'specularMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_specularmap_flat_8192x4096.jpg'),
        'normalMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_normalmap_flat_8192x4096.jpg'),
        'bumpMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_bumpmap_flat_8192x4096aa.jpg')
      });
    } else if (matTypes[1] === 'pure') { //纯色
      matOpt3d = $.extend(matOpt3d, {
        'normalScale': new THREE.Vector2(2, 2),
        'map': THREE.ImageUtils.loadTexture('./../mapping/1/pure.jpg'),
        'specularMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_specularmap_flat_8192x4096.jpg'),
        'normalMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_normalmap_flat_8192x4096.jpg'),
        'bumpMap': THREE.ImageUtils.loadTexture('./../mapping/1/earth_bumpmap_flat_8192x4096aa.jpg')
      });
    } 
    return new THREE.MeshPhongMaterial(matOpt);
  } else if (matTypes[0] === 'flat') {
    var matTag = matTypes[1] || 'pure';
    if (matTag === 'pure') {
      return new THREE.MeshBasicMaterial(matOpt);
    }
  }
};

Globe.prototype.genAtmosphere = function() {
  var r = this._r * 1.2;
  var geo = new THREE.SphereGeometry(r, 60, 60);
  var mat = this.genMaterialAtmosphere();
  var mesh = this.mesh = new THREE.Mesh(geo, mat);
  this.three3D.add(mesh);
};

/**
 * genMaterialAtmosphere 生成大气层
 */
Globe.prototype.genMaterialAtmosphere = function() {
  var vertexShader =
    'varying vec3 vNormal;' +
    'void main() {' +
    'vNormal = normalize( normalMatrix * normal );' +
       'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );' +
    '}';

  var fragmentShader =
    'varying vec3 vNormal;' +
    'uniform float intensity;' +
    'uniform float maxOpacity;' +
    'void main() {' +
    'float k = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), intensity );' +
       'gl_FragColor = vec4( 1.0, 1.0, 1.0, maxOpacity ) * k;' +
    '}';

  return new THREE.ShaderMaterial({
    uniforms: {
      intensity:{
        type: 'f',
        value: this._intensity
      },
      maxOpacity:{
        type: 'f',
        value: this._maxOpacity
      }
    },
    vertexShader: vertexShader,
    fragmentShader: fragmentShader,
    side: THREE.BackSide,
    blending: THREE.AdditiveBlending,
    transparent: true
  });
};

module.exports = Globe;