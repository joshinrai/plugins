'use strict';
var Utils = require('./../../core/utils');
var mercator = Utils.mercator;
var sphere = Utils.sphere;
var Marker = require('./marker');
var _ = require('lodash');
var isNone = Utils.isNone;
var THREE = require('three');

/**
 * Scatter3D 在3d平面上 生成一系列点图
 * @property {Object} opt 配置
 * @property {Float} opt.REarth 地球的半径
 * @property {Boolean} opt.isDynamic 是否需要动态修改marker
 * @property {String} opt.width 宽度
 * @property {String} opt.height 高度
 * @property {String} opt.color 文字色
 * @property {String} opt.background 背景色
 * @property {String} opt.fontSize 文字大小
 * @property {String} opt.paddingLeft 偏移距离
 * @property {Boolean} opt.fog 是否要雾化效果
 * @property {Function} opt.getText 获取要绘制的文字的函数
 * @property {Object} opt.data 数据
 */
function Markers(opt) {
  if(!opt) console.log('Markers_无数据输入');
  this._opt = opt;
  this.three3D = opt.three3D;
  opt.REarth = this._REarth = opt.REarth || 1.04;
  opt.isDynamic = this._isDynamic = opt.isDynamic || false;
  opt.background = this._background = opt.background || 'rgba(0,0,0,0.9)';
  var quality = opt.quality = this._quality = opt.quality || 3;
  opt.width = this._width = opt.width * quality || 240 * quality;//可以写6个字
  opt.height = this._height = opt.height * quality || this._width / 6 * quality; 
  var color = (typeof(opt.color) ==='function') ? opt.color(): opt.color;
  opt.color = this._color = color || '#ccc';
  opt.fontSize = this._fontSize = opt.fontSize || 25;
  opt.offsetLeft = this._offsetLeft = opt.offsetLeft || 30;
  opt.fog = this._fog = opt.fog || true;
  opt.N = this._N = opt.N || 100;
  opt.getText = this._getText = opt.getText;
  this._data = opt.data || {};
  this._markers = [];

  var mapType = opt.mapType || 'sphere';
  if(mapType === 'sphere'){
    this._transfer = sphere;
  }else if(mapType ==='plane'){
    this._transfer = mercator;
  }
}

/**
 * onUpdate 自定义更新数据后的操作
 * @param  {Function} cb 更新数据触发的函数
 */
Markers.prototype.onUpdate = function(cb){
  if(typeof(cb) !== 'function') return console.log('必须是函数');
  this._updateCtx = this._opt.updateCtx = cb;
};

/**
 * data 数据更新的操作
 * @param  {Object} ds 数据
 */
Markers.prototype.data = function(ds){//自定义更新坐标的方式
  var transfer = this._transfer;
  var data = this._data;
  var opt = this._opt;
  var REarth = this._REarth;
  var getText = this._getText;
  var d, id, text, pos, lat, lng, obj, marker, pt;
  for(var k in ds){
    d = ds[k];
    id = d.id || k;
    text = getText? getText(d): d.text;
    pos = d.cp || d.pos;
    if (pos) {
      lat = pos.lat, lng = pos.lng;
    } else {
      lat = d.lat, lng = d.lng;
    }
    pt = transfer(lng, lat, REarth, 0, 0, 0);
    obj = data[id];
    if(obj){
      marker = obj.marker;
    } else {
      marker = new Marker(opt);
      data[id] = {'marker': marker};
    }
    marker.updateText(text, d);
    if(pos){
      marker.updatePos(pt, d);
    }
  }
};

Markers.prototype.loop = function () {
};

/**
 * remove 移除
 */
Markers.prototype.remove = function () {
  var data = this._data;
  for(var k in data){
    var d = data[k];
    d.marker.remove();
    delete data[k];
  }
};

module.exports = Markers;
