'use strict';
var THREE = require('three');

/**
 * Marker 在3d空间内上 生成一个marker
 * @property {Object} opt 配置
 * @property {Boolean} opt.isDynamic 是否需要动态修改marker
 * @property {String} opt.width 宽度
 * @property {String} opt.height 高度
 * @property {String} opt.color 文字色
 * @property {String} opt.background 背景色
 * @property {String} opt.fontSize 文字大小
 * @property {String} opt.paddingLeft 偏移距离
 * @property {Boolean} opt.fog 是否要雾化效果
 * @property {Function} opt.updateCtx 绘制marker的方法
 * @property {Object} opt.data 数据
 */
function Marker(opt) {
  this.opt = opt;
  this.init();
}
/**
 * init 初始化
 */
Marker.prototype.init = function () {
  var opt = this.opt;
  var canvas = this.canvas = document.createElement('canvas');
  this.ctx = canvas.getContext('2d');
  canvas.width = opt.width;
  canvas.height = opt.height;

  var texture = this.texture = new THREE.Texture(canvas);
  texture.needsUpdate = true;

  var mat = this.mat = new THREE.SpriteMaterial({
    'useScreenCoordinates': true,
    'map': texture,
    'opacity': 1,
    'transparent': true,
    'depthTest': true,
    'fog': false//opt.fog
  });
  var object = this.object = new THREE.Sprite(mat);
  object.scale.set(0.2, 0.2 * opt.height/opt.width);
  opt.three3D.add(object);
};

/**
 * updatePos 更新位置
 * @param  {Object} pos threejs的点
 */
Marker.prototype.updatePos = function (pos) {
  this.object.position.set(pos.x, pos.y, pos.z);
};

/**
 * clear 清空此marker
 */
Marker.prototype.clear = function () {
  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
};

/**
 * updateText 更新marker的文字
 * @param  {String} text [description]
 * @return {[type]}      [description]
 */
Marker.prototype.updateText = function (text,  d) {
  var opt = this.opt;
  var ctx = this.ctx;
  this.clear();
  if(opt.updateCtx){
    return opt.updateCtx(ctx);
  }

  var canvasW = ctx.canvas.width, canvasH = ctx.canvas.height;

  ctx.fillStyle = opt.background;
  ctx.font = opt.fontSize + 'px Arial';
  var measureText = ctx.measureText(text);
  ctx.textBaseline = 'middle';
  var textW = measureText.width;
  var left = (canvasW - textW) / 2;
  if (opt.offsetLeft) left -= opt.offsetLeft;
  ctx.fillRect(0,0, textW + 2 * left, opt.height);
  ctx.fillStyle = opt.getColor ? opt.getColor(d) : opt.color;
  ctx.fillText(text, left, opt.height / 2, textW);
  ctx.fill();
};

/**
 * loop 循环 使材质更新
 */
Marker.prototype.loop = function () {
};

/**
 * remove 移除粒子系统
 */
Marker.prototype.remove = function () {
  this.three3D.remove(this.pointCloud);
};

module.exports = Marker;
