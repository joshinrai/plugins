'use strict';
var THREE = require('three');
var $ = require('jquery');
var Utils = require('@ali/map-utils');
var requestAnimationFrame = Utils.requestAnimationFrame;
var cancelAnimationFrame = Utils.cancelAnimationFrame;

var self;
var Three3D = function (container, options) {
  this.container = $(container);
  this.w = container.width();
  this.h = container.height();
  // this.projector = new THREE.Projector(); //为日后3d投影到2d平面之用

  this.defaults = {};
  this.defaults.clearColor = 0X111111;

  this.initScene();
  this.initCamera();

  this.initRender();
  this.events();
  this.loop();
  self = this;
};

Three3D.prototype.initLight = function () {
};

Three3D.prototype.initScene = function () {
  this.scene = new THREE.Scene();
};

Three3D.prototype.initCamera = function () {
  var w = this.w;
  var h = this.h;
  var camera = this.camera = new THREE.PerspectiveCamera(60, w / h, 0.001, 5000);
  camera.up.x = 0;
  camera.up.y = 1;
  camera.up.z = 0;
  camera.lookAt(new THREE.Vector3(0, 0, 0));

  this.scene.add(camera);
};

//渲染器配置
Three3D.prototype.initRender = function () {
  var clearColor = this.defaults.clearColor;
  var renderer = new THREE.WebGLRenderer({
    'antialias': true,
    'alpha': true
  });
  this.renderer = renderer;
  renderer.setClearColor(clearColor, 1);
  renderer.setSize(this.w, this.h);
  renderer.autoClear = false;
  renderer.shadowMapCullFace = THREE.CullFaceBack;
  var domElement = $(renderer.domElement);
  domElement.css({
    'position': 'absolute',
    'top': 0,
    'left': 0,
    'height': '100%',
    'width': '100%'
  });
  this.container.append(domElement);
};

Three3D.prototype.update = function () {
  var renderer = this.renderer;
  renderer.clear();
  renderer.render(this.scene, this.camera);
};

Three3D.prototype.loop = function () {
  this.update();
  requestAnimationFrame(this.loop.bind(this));
};

Three3D.prototype.add = function (obj) {
  this.scene.add(obj);
};

Three3D.prototype.remove = function (obj) {
  this.scene.remove(obj);
};

Three3D.prototype.children = function () {
  return this.scene.children;
};

Three3D.prototype.setClearColor = function (clearColor) {
  this.renderer.setClearColor(clearColor);
};

Three3D.prototype.setCameraPosition = function (position) {
  this.camera.position.x = position.x;
  this.camera.position.y = position.y;
  this.camera.position.z = position.z;
};

Three3D.prototype.setCameraView = function (position) {
  this.camera.lookAt(position);
};

Three3D.prototype.getCamera = function () {
  return this.camera;
};

Three3D.prototype.setSize = function (w, h) {
  this.renderer.setSize(w, h);
};

Three3D.prototype.getContainer = function () {
  return this.container;
};

Three3D.prototype.events = function () {
  $(window).resize(this.onWindowResize.bind(this));
};

Three3D.prototype.onWindowResize = function () {
  var camera = this.camera;

  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  this.renderer.setSize(window.innerWidth, window.innerHeight);
};

Three3D.prototype.test = function () {
  var scene = this.scene;
  var sphere = new THREE.SphereGeometry(0.2, 60, 60);

  var mesh = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({
    color: 0XFF9900
  }));
  mesh.position.x = 2;
  scene.add(mesh);

};

module.exports = Three3D;