require('./line.css');
var Line = require('../../dataV');
var d3 = require('../../libs/d3');
var _ = require('../../util');

var LineMulti = function (options) {
  this._init(options);
  this._initLayout();
};

Line.extend(LineMulti, {
  render : function () {
    this.svg.classed('line-chart-g', true);
    this._beforeRender();
    var opt = this.$options;
    var data = this._data;

    var xAxis, yAxis;
    var xOpt = _.extend({
      orient : 'bottom',
      key : opt.x
    }, (opt.xaxis || {}));

    var union = [];
    this._data.forEach(function (obj) {
      union = _.union(union, obj[opt.y]);
    });
    var max = _.max(union);

    var yOpt = _.extend({
      orient : 'left',
      key : opt.y,
      max : max,
      min : 0
    }, (opt.yaxis || {}));

    xAxis = this.renderAxis(xOpt);
    yAxis = this.renderAxis(yOpt);

    //真正画数据的部分
    var x = xAxis.getX();
    var y = yAxis.getX();
    var len = data[0][opt.y].length;

    this.svg
      .datum(data)
      .append('g')
      .attr('class', 'lines')
      .each(function () {
        var that = d3.select(this);
        for (var i = 0; i < len; i++) {
          var line = d3.svg.line()
            .x(function(d) {
              return x(d[opt.x]); })
            .y(function(d) { return y(d[opt.y][i]); });

          that.append('path')
            .attr({
              "class": "line line" + (i+1),
              "d": line
            });
        }
      });
    this._afterRender();
  }
});

module.exports = LineMulti;
