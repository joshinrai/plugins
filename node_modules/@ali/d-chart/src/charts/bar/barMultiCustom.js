require('./bar.css');
var DataV = require('../../dataV');
var d3 = require('../../libs/d3');
var _ = require('../../util');

function BarMultiCustom(options) {
  this._init(options);
  this._initLayout();
}

DataV.extend(BarMultiCustom, {
  render : function () {
    this.svg.classed('bar-chart-g', true);
    this._beforeRender();
    var opt = this.$options;
    //画轴
    var xAxis, yAxis;
    var xOpt = _.extend({
      orient : 'bottom',
      key : opt.x
    }, (opt.xaxis || {}));

    var union = [];
    this._data.forEach(function (obj) {
      union = _.union(union, obj[opt.y]);
    });
    var max = _.max(union);

    var yOpt = _.extend({
      orient : 'left',
      key : opt.y,
      max : max,
      min : 0
    }, (opt.yaxis || {}));

    xAxis = this.renderAxis(xOpt);
    yAxis = this.renderAxis(yOpt);

    //真正画数据的部分
    var x = xAxis.getX();
    var y = yAxis.getX();
    var len = this._data[0][opt.y].length;
    var w = (x.rangeBand() - (len - 1) * opt.padding) / len;

    this.svg.selectAll('.bars')
      .data(this._data)
      .enter()
      .append('g')
      .attr('class', 'bars')
      .each(function () {
        var that = d3.select(this);

        for (var i = 0; i < len; i++) {
          that.append('polygon')
            .attr({
              "class": "bar y" + (i + 1),
              "points" : function (d) {
                var pos = [
                  {x: x(d[opt.x]) + (opt.padding + w) * i, y: y(0)},
                  {x: x(d[opt.x]) + (opt.padding + w) * i, y: y(d[opt.y][i])},
                  {x: x(d[opt.x]) + (opt.padding + w) * i + w, y: y(d[opt.y][i])},
                  {x: x(d[opt.x]) + (opt.padding + w) * i + w, y: y(0)}
                ];
                if (typeof opt.customPos === 'function') {
                  pos = opt.customPos(pos, i);
                }
                return _.pos2Str(pos);
              }
            });
        }
      });

    this._afterRender();
  },
  updateSeries : function () {
    var self = this;
    var opt = this.$options;
    var axis = this._com.getComs('axis');
    var x = axis[0].getX();
    var y = axis[1].getX();
    var len = this._data[0][opt.y].length;
    var w = (x.rangeBand() - (len - 1) * opt.padding) / len;

    this.svg.selectAll('.bars')
      .data(this._data);

    this.svg.selectAll('.bars')
      .each(function () {
        var that = d3.select(this);

        for (var i = 0; i < len; i++) {
          that.select('.y' + (i+1))
            .transition()
            .duration(1500)
            .ease('bounce')
            .attr({
              "points" : function (d) {
                var pos = [
                  {x: x(d[opt.x]) + (opt.padding + w) * i, y: y(0)},
                  {x: x(d[opt.x]) + (opt.padding + w) * i, y: y(d[opt.y][i])},
                  {x: x(d[opt.x]) + (opt.padding + w) * i + w, y: y(d[opt.y][i])},
                  {x: x(d[opt.x]) + (opt.padding + w) * i + w, y: y(0)}
                ];
                if (typeof opt.customPos === 'function') {
                  pos = opt.customPos(pos, i);
                }
                return _.pos2Str(pos);
              }
            });
        }
      });
  }
});

module.exports = BarMultiCustom;