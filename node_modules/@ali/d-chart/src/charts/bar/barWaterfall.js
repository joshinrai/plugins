require('./bar.css');
var Bar = require('./bar');
var d3 = require('../../libs/d3');
var _ = require('../../util');

function BarWaterfall(options) {
  this._init(options);
  this._initLayout();
}

Bar.extend(BarWaterfall, {
  render : function () {
    this.svg.classed('bar-chart-g', true);
    this._beforeRender();
    var self = this;
    var opt = this.$options;
//    画轴
    var xAxis, yAxis;
    var xOpt = _.extend({
      orient : 'bottom',
      key : opt.x
    }, (opt.xaxis || {}));
    var yOpt = _.extend({
      orient : 'left',
      key : opt.y
    }, (opt.yaxis || {}));

    xAxis = this.renderAxis(xOpt);
    yAxis = this.renderAxis(yOpt);

    //真正画数据的部分
    var x = xAxis.getX();
    var y = yAxis.getX();

    this.svg.selectAll('.bar')
      .data(this._data)
      .enter()
      .append('rect')
      .attr({
        "class": function (d, i) {
          var base = 'bar ';
          if (i === 0 || i === self._data.length - 1) {
            return base;
          }
          var da = self._data;
          return da[i][opt.y] > da[i - 1][opt.y] ? base + 'higher' : base + 'lower';
        },
        "x": function (d) {
          return x(d[opt.x]);
        },
        "y": function (d, i) {
          if (i === 0 || i === self._data.length - 1) {
            return y(d[opt.y]);
          }
          var da = self._data;
          return da[i][opt.y] > da[i - 1][opt.y] ? y(d[opt.y]) : y(da[i - 1][opt.y]);
        },
        "width": function (d) { return x.rangeBand(); },
        "height": function (d, i) {
          if (i === 0 || i === self._data.length - 1) {
            return y(yAxis.getMin()) - y(d[opt.y]);
          }
          var da = self._data;
          return Math.abs(y(d[opt.y]) - y(da[i - 1][opt.y]));
        }
      });

    this._afterRender();
  }
});

module.exports = BarWaterfall;