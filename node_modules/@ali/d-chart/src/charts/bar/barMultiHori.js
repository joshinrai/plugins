require('./bar.css');
var DataV = require('../../dataV');
var d3 = require('../../libs/d3');
var _ = require('../../util');

function BarMultiHori(options) {
  this._init(options);
  this._initLayout();
}

DataV.extend(BarMultiHori, {
  render : function () {
    this.svg.classed('bar-chart-g', true);
    this._beforeRender();
    var self = this;
    var opt = this.$options;
    //画轴
    var xAxis, yAxis;
    var union = [];
    this._data.forEach(function (obj) {
      union = _.union(union, obj[opt.x]);
    });
    var max = _.max(union);
    var xOpt = _.extend({
      orient : 'bottom',
      key : opt.x,
      max : max
    }, (opt.xaxis || {}));

    var yOpt = _.extend({
      orient : 'left',
      key : opt.y
    }, (opt.yaxis || {}));

    xAxis = this.renderAxis(xOpt);
    yAxis = this.renderAxis(yOpt);

    //真正画数据的部分
    var x = xAxis.getX();
    var y = yAxis.getX();
    var len = this._data[0][opt.x].length;
    var h = (y.rangeBand() - (len - 1) * opt.padding) / len;

    this.svg.selectAll('.bar')
      .data(this._data)
      .enter()
      .append('g')
      .attr('class', 'bars')
      .each(function () {
        var that = d3.select(this);
        for (var i = 0; i < len; i++) {
          that.append('rect')
            .attr({
              "class": "bar y" + (i + 1),
              "x": function (d) { return x(0);},
              "y": function (d) { return y(d[opt.y]) + (opt.padding + h) * i; },
              "width": function (d) { return x(d[opt.x][i]); },
              "height": function (d) { return h;}
            });
        }
      });

    this._afterRender();
  }
});

module.exports = BarMultiHori;