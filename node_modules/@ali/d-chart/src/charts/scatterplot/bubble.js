require('./scatterplot.css');
var DataV = require('../../dataV');
var d3 = require('../../libs/d3');
var _ = require('../../util');

function Bubble(options) {
  this._init(options);
  this._initLayout();
}

DataV.extend(Bubble, {
  render : function () {
    this.svg.classed('point-chart-g', true);
    this._beforeRender();
    var self = this;
    var opt = this.$options;
//    画轴
    var xAxis, yAxis;
    var xOpt = _.extend({
      orient : 'bottom',
      key : opt.x
    }, (opt.xaxis || {}));

    xAxis = this.renderAxis(xOpt);
    var x = xAxis.getX();
    var step = x.rangeBand() / 2;
    var radio = _.max(this._data, function (d) { return d.r}).r / step;
    //调整数据，防止上下超

    var min = _.min(this._data, function (d) {
      return d[opt.y] - d.r / radio;
    });
    min = min[opt.y] - min.r / radio;

    var max = _.max(this._data, function (d) {
      return d[opt.y] + d.r / radio;
    });
    max = max[opt.y] + max.r / radio;

    var yOpt = _.extend({
      orient : 'left',
      key : opt.y,
      max : max,
      min : min
    }, (opt.yaxis || {}));

    yAxis = this.renderAxis(yOpt);

    var y = yAxis.getX();

    //真正画数据的部分
    this.svg.selectAll('.point.bubble')
      .data(this._data)
      .enter()
      .append('circle')
      .attr({
        "class": "point bubble",
        "cx": function (d) { return x(d[opt.x]);},
        "cy": function (d) { return y(d[opt.y]); },
        "r" : function (d) {
          return d.r / radio;
        }
      });
    this._afterRender();
  }
});

module.exports = Bubble;
