require('./scatterplot.css');
var Point = require('./point');
var d3 = require('../../libs/d3');
var _ = require('../../util');

function ScatterplotWithTime(options) {
  this._init(options);
  this._initLayout();
}

Point.extend(ScatterplotWithTime, {
  renderTimeLine : function (extra) {
    this._beforeRender();
    var self = this;
    var opt = this.$options;
//    画轴
    var xAxis, yAxis;
    xAxis = this.renderAxis({
      orient: 'bottom',
      key: opt.x,
      type: 'time',
      format: opt.format
    });

    xAxis.addClass('x');

    yAxis = this.renderAxis({
      orient: 'left',
      key: opt.y,
    });

    //真正画数据的部分
    var x = xAxis.getX();
    var gx = xAxis.getAxisX();
    var y = yAxis.getX();

    function update(data) {
      self.svg.selectAll('.point').data([]).exit().remove();
      self.svg.selectAll('.point')
        .data(data)
        .enter()
        .append('circle')
        .attr({
          "class": "point",
          "cx": function (d) {
            return x(d3.time.format(opt.format).parse(d[opt.x]));
          },
          "cy": function (d) { return y(d[opt.y]); },
          "r" : 5
        }).on('mouseover', function () {
          d3.select(this).style('opacity', 0.6);
          self.emit('bar.mouseover', this);
        }).on('mouseout', function () {
          d3.select(this).style('opacity', 1);
          self.emit('bar.mouseout', this);
        }).on('click', function () {
          self.emit('bar.click', this);
        });
    }

    update(this._data);
    var time = this.renderTime(extra);
    var x2 = time.getX();
    time.on('time.brush', function (brush) {
      x.domain(brush.empty() ? x2.domain() : brush.extent());
      if (!brush.empty()) {
        var begin = brush.extent()[0];
        var end = brush.extent()[1];
        var data = _.filter(self._data, function (d) {
          return new Date(d[opt.x]) >= begin && new Date(d[opt.x]) <= end;
        });
       update(data);
      }
      self.svg.select(".x.axis").call(gx);
    });
    this._afterRender();
  }
});

module.exports = ScatterplotWithTime;