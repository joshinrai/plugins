require('./number.css');
var DataV = require('../../dataV');
var d3 = require('../../libs/d3');
var _ = require('../../util');

function Number(options) {
  this._init(options);
  this._initLayout();
}

DataV.extend(Number, {
  render : function () {
    this.svg.classed('number-chart-g', true);
    this._beforeRender();
    var opt = this.$options;

    var aOpt = _.extend({
      orient : 'bottom',
      type : 'category',
      key : opt.x,
      padding: 0.3,
    }, (opt.axis || {}));

    var axis = this.renderCom('axis', aOpt);
    var x = axis.getX();

    var nOpt = {'class' : 'number'};
    if (aOpt.orient === 'top' || aOpt.orient === 'bottom') {
      nOpt.x = function (d) {
        return x(d[opt.x]);
      };
      nOpt.y = 0;
    } else {
      nOpt.x = 0;
      nOpt.y = function (d) {
        return x(d[opt.x]);
      }
    }
    this.svg.selectAll('.number')
      .data(this._data)
      .enter()
      .append('text')
      .attr(nOpt).text(function (d) {return d[opt.y]});

    var dom = this.svg.select('.number');
    var font = parseInt(dom.style('font-size'));
    var doms = this.svg.selectAll('.number');

    if (aOpt.orient === 'top' || aOpt.orient === 'bottom') {
      var w = parseInt(dom.style('width'));
      doms.each(function () {
        d3.select(this)
          .attr({
            'dx': (x.rangeBand() - w) / 2,
            'dy': font
          });
      });
    } else {
      var h = parseInt(dom.style('height'));
      doms.each(function () {
        d3.select(this)
          .attr({
            'dx': 5 + 'px',
            'dy': font + (x.rangeBand() - h) / 2
          });
      });
    }

    this._afterRender();
  }
});

module.exports = Number;