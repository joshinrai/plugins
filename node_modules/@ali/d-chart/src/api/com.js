var Event = require('../libs/event');
var _ = require('../util');

var Axis = require('../com/axis');
var BG = require('../com/bg');
var Legend = require('../com/legend');
var Time = require('../com/time');
var Title = require('../com/title');

var Com = function () {
  this._coms = {};
  this.instance = ['layout'];
};
Event.extend(Com, {
  add : function (type, opt) {
    var C = _.initialUpperCase(type);
    return this['add' + C](opt);
//    var com = new C(opt);
//    this.addCom({type : type, com : com});
//    return com;
  },
  addAxis : function (opt) {
    var axis = new Axis(opt);
    this.addCom({type : 'axis', com : axis});
    return axis;
  },
  addBG : function (opt) {
    var bg = new BG(opt);
    this.addCom({type : 'background', com : bg});
    return bg;
  },
  addLegend : function (opt) {
    var legend = new Legend(opt);
    this.addCom({type : 'legend', com : legend});
    return legend;
  },
  addTitle : function (opt) {
    var title = new Title(opt);
    this.addCom({type : 'legend', com : title});
    return title;
  },
  addTime : function (opt) {
    var time = new Time(opt);
    this.addCom({type : 'timeline', com : time});
    return time;
  },
  addCom : function (com) {
    var self = this;
    var obj = com.com;
    var type = com.type;
    if (this._coms[type]) {
      this._coms[type].push(obj);
    } else if (_.indexOf(this.instance, type) !== -1) {
      this._coms[type] = obj;
    } else {
      this._coms[type] = [obj];
    }
    obj.addClass(type + this._coms[type].length || 1);
    obj.on('error', function (err) {
      self.emit('error', err);
    });
  },
  getComs : function (type) {
    return this._coms[type];
  },
  removeCom : function (com) {
    if (!this._coms[com.type]) {
      console.log('warn : there is no ' + com.type + ' in coms');
      return;
    }
    var arr = this._coms[com.type];
    var index = _.findIndex(arr, com.com);
    if (index === -1) {
      console.log('warn : can not find ' + com.type + ' in coms');
      return;
    }
    arr[index].destroy();
    arr.splice(index, 1);
  },
  removeAllComs : function () {
    this._coms = {};
  },
  getAccountByType : function (type) {
    return this._coms[type] &&
      (this._coms[type].length || 1);
  }
});

module.exports = Com;