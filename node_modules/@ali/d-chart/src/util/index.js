var _ = require('underscore');

_.mixin({
  exec : function (arg) {
    var args = Array.apply(null, arguments).slice(1);
    if (typeof arg === 'function') {
      return arg.call(this, args);
    } else {
      return arg;
    }
  },
  instance : function (objName) {
    if (!_.has(this, objName)) {
      var args = Array.apply(null, arguments).slice(1);
      return new objName(args);
    }
    return this[objName];
  },
  initialUpperCase : function (str) {
    var res;
    str.replace(/\w+/g, function(word) {
      res = word.substring(0,1).toUpperCase() +
        word.substring(1).toLowerCase();
      return res;
    });
    return res;
  },
  pos2Str : function (arr) {
    var str = '';
    arr.forEach(function (item) {
      str += item.x + ',' + item.y + ' ';
    });
    return str;
  },
  obj2Str : function (obj) {
    var str = '';
    var exec = null;
    if (typeof arguments[1] === 'function') {
      exec = arguments[1];
    }
    for (var key in obj) {
      str += exec ? exec(key, obj[key]) : (key + ':' + obj[key] + ';');
    }
    return str;
  },
  pos2Path : function (arr) {
    var str = 'M';
    arr.forEach(function (item, i) {
      if (i === 0) {
        str += item.x + ' ' + item.y;
      } else {
        str += 'T' + item.x + ' ' + item.y;
      }
    });
    str += 'Z';
    return str;
  },
  split : function (obj, str) {
    if (_.isArray(obj)) {
      return obj.split(str);
    }
    var tmp = '';
    for (var key in obj) {
      tmp += obj[key] + str;
    }
    return tmp;
  }
});

module.exports = _;

