var DataV = require('../../charts/bar/barMultiCustom');
var _ = require('../../util');
var d3 = require('../../libs/d3');
var textures = require('textures');

function CountryBar(options) {
  this.opt = {
    margin : {top: 0, right: 14, bottom: 30, left: 15},
    xaxis : {
      type : 'category',
      padding : 0.3
    },
    yaxis : {
      min : 0,
      max : 9
    },
    beforeLayout : {
      legend : {
        position : 'bottom',
        height : '70',
        width : '280'
      }
    },
    customPos: function (pos, type) {
      if (type === 0) {
        var x = pos[0].x;
        var y = pos[3].y;
        pos[0] = {
          x: x,
          y: y - 10
        };
      } else if (type === 1) {
        var x = pos[2].x;
        var y = pos[0].y;
        pos[3] = {
          x: x,
          y: y - 10
        };
      }
      return pos;
    },
    legend : {
      type : 'horizontal',
      customRender : function (label, pos, i) {
        var x = pos.x + 10;
        var y = pos.y + 10;
        var w = pos.width - 20;
        var h = pos.height - 20;
        this.append('polygon')
          .attr({
            'points': function () {
              var points = [
                {x: x, y: y + h},
                {x: x, y: y},
                {x: x + w - 20, y: y},
                {x: x + w, y: y + 35},
                {x: x + w, y: y + h}
              ];
              return _.pos2Str(points);
            }
          });
        this.append('text')
          .attr({
            'class' : 'label-text',
            'x' : x + 22,
            'y' : y + h - 20
          }).text(label);

        this.append('rect')
          .attr({
            'class' : 'label-rect',
            'x' : x + w - 48,
            'y' : y + 28,
            'width' : 28,
            'height' : 28
          });

        var t;
        if (i === 0) {
          t = textures.lines()
            .orientation("5/8")
            .stroke("#6484b0")
            .size(4)
            .strokeWidth(1);
        } else if (i === 1) {
          t = textures.lines()
            .orientation("3/8")
            .stroke("#6bcfdc")
            .size(4)
            .strokeWidth(1);
        }

        this.call(t);
        this.select('rect').style("fill", t.url());
      }
    },
  };
  this.opt = _.extend({}, this.opt, options);
  this._init(this.opt);
  this._initLayout();
}

DataV.extend(CountryBar, {
  _beforeRender : function () {
    var bg = this.renderBG();
    bg.renderGrid(12, 5);
  },
  _afterRender : function () {
    var svg = this.svg;
    var t1 = textures.lines()
      .orientation("5/8")
      .stroke("#6484b0")
      .size(4)
      .strokeWidth(1);
    var t2 = textures.lines()
      .orientation("3/8")
      .stroke("#6bcfdc")
      .size(4)
      .strokeWidth(1);

    svg
      .call(t1)
      .call(t2);

    svg.selectAll('.y1').style("fill", t1.url());
    svg.selectAll('.y2').style("fill", t2.url());

    var legend = this.renderLegend();
    var axis = svg.select('.axis1');
    var h = parseInt(axis.attr('transform').match(/\d+/g)[1]);
    axis.attr('transform', 'translate(0,' + (h + 10) + ')');
  },
  update : function (type, value, data) {
    if (_.isArray(data)) {
      this.setSource(data);
    }
    this['update' + _.initialUpperCase(type)](value, data);
  },
  updateXaxis0 : function (val, data) {
    this.$options.x = val;
    var axis = this._com.getComs('axis')[0];
    axis.updateKey({
      key: val,
      _data: data
    });
    this.updateSeries();
  },
  updateYaxis0 : function (val, data) {
    var axis = this._com.getComs('axis')[0];
    axis.updateKey({
      key: val,
      _data: data
    });
    this.updateSeries();
  },
  updateYaxis1 : function (val) {

  }
});

module.exports = CountryBar;