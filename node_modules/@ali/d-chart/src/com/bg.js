var _ = require('../util');
var Com = require('./index');
var d3 = require('../libs/d3');
/**
 * è½´
 * @constructor
 */
function BG(options) {
  this.$options = {};
  this.el;
  this.valid = true;
  this.msg = 'undefined';
  this._init(options);
  this._valid();
  this.el = this.$options.svg
    .append('g')
    .attr({
      'class' : 'background'
    });
}

Com.extend(BG, {
  _valid : function () {},
  render : function () {
    if (!this.valid) {
      this.emit('error', {msg: this.msg});
    }
    return this;
  },
  renderGrid : function (row, col) {
    var maxH = this.$options.height;
    var maxW = this.$options.width;
    var h = (maxH - 1) / row;
    var w = (maxW - 1) / col;
    var el = this.el;
    for (var i = 0; i < maxH; i += h) {
      el.append('path')
        .attr({
          'class' : 'bg-path',
          'd' : 'M0' + ' ' + i + 'h' + maxW
        });
    }
    for (var j = 0; j < maxW; j += w) {
      el.append('path')
        .attr({
          'class' : 'bg-path',
          'd' : 'M' + j + ' 0' + 'v' + maxH
        })
    }
  },
  color : function (val) {
    var opt = this.$options;
    if (!this.el) {
      this.msg = 'there is no el';
      this.emit('error', {msg: this.msg});
      return;
    }
    var color = this.el.select('.color');
    if (color[0].length) {
      color.style('fill', val);
    } else {
      this.el
        .append('rect')
        .attr({
          class : 'color',
          x : 0,
          y : 0,
          width : opt.width,
          height : opt.height
        }).style('fill', val);
    }
    return this;
  }
});

module.exports = BG;