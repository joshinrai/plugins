var _ = require('../util');
var Com = require('./index');
var d3 = require('../libs/d3');
/**
 * 图例
 * @constructor
 */
function Legend(options) {
  this.$options = {
    type : 'horizontal',
    renderType : 'defaults'
  };
  this.el;
  this.svg;
  this.valid = true;
  this.msg = 'undefined';
  this._init(options);
  this._valid();
}

Com.extend(Legend, {
  _valid : function () {
    var opt = this.$options;
    var types = ['horizontal', 'vertical'];
    if (_.indexOf(types, opt.type.toLowerCase()) === -1) {
      this.msg = 'legend arguments error. there is no ' + opt.type + ' in types.'
      opt.type = types[0];
      this.valid = false;
    }
    opt.type = _.initialUpperCase(opt.type);
    var rTypes = ['defaults'];
    if (_.indexOf(rTypes, opt.renderType.toLowerCase()) === -1) {
      this.msg = 'legend arguments error. there is no ' + opt.renderType + ' in types.'
      opt.renderType = rTypes[0];
      this.valid = false;
    }
    opt.renderType = _.initialUpperCase(opt.renderType);
  },
  render : function () {
    var opt = this.$options;
    if (!this.valid) {
      this.emit('error', {msg: this.msg});
    }
    var legOpt = opt.beforeLayout.legend;
    var style = _.extend(_.omit(legOpt, 'position'), {margin : _.split(opt.margin, 'px ')});
    this.el = d3.select(opt.el)
      .append('div')
      .attr({
        'class' : 'legend'
      }).style(style);
    this.svg = this.el.append('svg')
      .attr({
        'width' : legOpt.width,
        'height' : legOpt.height
      })
      .append('g');

    this['cal' + opt.type]();
    return this;
  },
  calHorizontal : function () {
    var opt = this.$options;
    var len = opt.legendLabels.length;
    var legOpt = opt.beforeLayout.legend;
    var w = legOpt.width / len;
    var self = this;
    opt.legendLabels.forEach(function (label, i) {
      var pos = {
        x : i * w,
        y : 0,
        width : w,
        height : legOpt.height
      };
      var g = self.svg.append('g')
        .attr({
          'class': 'legend-label legend' + i
        });
      if (typeof opt.legend.customRender === 'function') {
        opt.legend.customRender.call(g, label, pos, i);
      } else {
        this['render' + opt.renderType](g, label, pos, i);
      }
    });
  },
  calVertical : function () {
    var opt = this.$options;
    var len = opt.legendLabels.length;
    var legOpt = opt.beforeLayout.legend;
    var h = legOpt.height / len;
    var self = this;
    opt.legendLabels.forEach(function (label, i) {
      var pos = {
        x : 0,
        y : i * h,
        width : legOpt.width,
        height : h
      };
      var g = self.svg.append('g')
        .attr({
          'class': 'legend-label legend' + i
        });
      if (typeof opt.legend.customRender === 'function') {
        opt.legend.customRender.call(g, label, pos, i);
      } else {
        this['render' + opt.renderType](g, label, pos, i);
      }
    });
  },
  renderDefaults : function (g, label, pos, i) {

  }
});

module.exports = Legend;