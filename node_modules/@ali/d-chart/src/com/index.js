var _ = require('../util');
var d3 = require('../libs/d3');
var Event = require('../libs/event');
var Com = function () {
};

Event.extend(Com, {
  _init : function (options) {
    _.extend(this.$options, options);
  },
  destroy : function () {
    this.el && this.el.remove();
  },
  addClass : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .classed(obj, true);
    }
    return this.el && this.el
      .classed(obj, true);
  },
  removeClass : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .classed(obj, false);
    }
    return this.el && this.el
      .classed(obj, false);
  },
  attr : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .attr(obj);
    }
    return this.el && this.el
      .attr(obj);
  },
  style : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .style(obj);
    }
    return this.el && this.el
      .style(obj);
  },
  append : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .append(obj);
    }
    return this.el && this.el
      .append(obj);
  },
  select : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .select(obj);
    }
    return this.el && this.el
      .select(obj);
  },
  selectAll : function (obj, selector) {
    if (selector) {
      return this.el && this.el.selectAll(selector)
        .selectAll(obj);
    }
    return this.el && this.el
      .selectAll(obj);
  },
  layout : function (type) {
    var opt = this.$options;
    var svg = opt.parentEl.select('.g-container');
    var pos = opt.svg.attr('transform') ? opt.svg.attr('transform').match(/\d+/g) : [0, 0];
    var box = opt.svg[0][0].getBBox();
    var w = box.width;
    var h = box.height;
    var el = this.el = svg.append('g')
      .attr('class', type);
    switch (opt.orient) {
    case 'right' :
      el.attr('transform', 'translate(' + (parseInt(pos[0]) + w) + ', 0)');
      break;
    case 'bottom' :
      el.attr('transform', 'translate(0, ' + (parseInt(pos[1]) + h) + ')');
      break;
    case 'left' :
      svg.selectAll('g').each(function () {
        var that = d3.select(this);
        if (that.classed(type)) {
          return true;
        }
        var tmpPos = that.attr('transform') ? that.attr('transform').match(/\d+/g) : [0, 0];
        that.attr('transform', 'translate(' + (parseInt(tmpPos[0]) + opt.elWidth) + ', 0)');
      });
      break;
    case 'top' :
      svg.selectAll('g').each(function () {
        var that = d3.select(this);
        if (that.classed(type)) {
          return true;
        }
        var tmpPos = that.attr('transform') ? that.attr('transform').match(/\d+/g) : [0, 0];
        that.attr('transform', 'translate(0, ' + (parseInt(tmpPos[1]) + opt.elHeight) + ')');
      });
      break;
    }
  }
});

module.exports = Com;
