var $ = require('jquery');
var _ = require('lodash');

var L = require('leaflet');
var Map = require('./../../map/map');

var EditCircle = L.Circle.extend({
  options: {
    infoNode:{
      className: 'leaflet-edit-node no-events'
    }
  },
  initialize: function (latlng, radius, options) {
    options = L.setOptions(options);
    L.Circle.prototype.initialize.call(this, latlng, radius, options);
  },
  addTo: function (map) {
     L.Circle.prototype.addTo.call(this, map);
     this._initEditDot();
     this.addEvents();
     this.addEventsEditDot();
     this._onMovingEnd();
     this._initInfoMarker();
     return this;
  },
  addEvents: function () {
    var container = this._container;
    var map = this._map;
    L.DomEvent
    .on(container, 'mousedown', function (e) {
      this._disableMarker();
      this.isDown = true;
    }, this)
    .on(container, 'mousemove', this._onMoving, this)
    .on(container, 'mouseover', this._onHover, this)
    .on(container, 'mouseout', this._onMovingEnd, this)
    .on(container, 'mouseout', this._onOut, this)
    .on(container, 'mouseup', function (e) {
      this.isDown = false;
    }, this);
  },
  addInfo: function (info) {
    if (!info) return;
    this.info = info;
  },
  addEventsEditDot: function () {
    var editRadiusDot = this.editRadiusDot;
    var container = editRadiusDot._container;
    var map = this._map;
    L.DomEvent
     .on(container, 'mouseover', function(e) {
      editRadiusDot.setStyle({
        fillOpacity: 0.9
      });
     })
    .on(container, 'mousedown', function(e) {
      this._initInfoMarker();
      this._disableMarker();
      this.isDotDown = true;
      L.DomEvent.stopPropagation(e);
    }, this)
    .on(container, 'mousemove', this._onScaling, this)
    .on(container, 'mouseup', function(e) {
      this.isDotDown = false;
    }, this)
    .on(container, 'mouseout', function(e) {
      this._onScalingEnd();
      L.DomEvent.stopPropagation(e);
    }, this);
  },
  _initEditDot: function () {
    var editRadiusDot = this.editRadiusDot = L.circleMarker(this._latlng, {
      radius: 10,
      weight: 0,
      fillColor: '#0ff',
      fillOpacity: 0
    }).addTo(this._map);
    this._updateEditDotPos();
  },
  _initInfoMarker: function () {
    if(this.infoMarker) return;
    var infoNode;
    if(! (infoNode = this.options.infoNode))return;
     var icon = this.icon = L.divIcon({
      className: infoNode.className,
      html: '',
      iconSize: null
    });
    this.infoMarker = L.marker(
      this._latlng,
      {icon: icon}).addTo(this._map);
  },

  _onHover: function () {
    if(this.isEdit) return;
    var node = this.infoMarker._icon;
    node.setAttribute('class', 'leaflet-edit-node leaflet-edit-node-submit');
    $(node).text('删除');
    this.editRadiusDot.setStyle({
      fillOpacity: 0.8
    });
    this.setStyle({
      dashArray: '12, 6',
      weight: '2',
      color: '#0ff'
    });
  },
  _onOut: function(){
  },
  _onMoving: function(e){
    if(!this.isDown) return;
    this._updateCenterPos(e);
    this._updateInfoMoving();
    L.DomEvent.stopPropagation(e);
  },

  _disableMarker: function () {
    var node = this.infoMarker._icon;
    node.setAttribute('class', 'leaflet-edit-node no-events');
  },

  _updateMarkerPos: function(latlng){
    this.infoMarker.setLatLng(latlng);
  },
  _updateCenterPos: function(e){//中心点的位置改变
    var map = this._map;
    var containerPoint = map.mouseEventToContainerPoint(e);
    var layerPoint = map.containerPointToLayerPoint(containerPoint);
    var latlng = map.layerPointToLatLng(layerPoint);
    this.setLatLng(latlng);
    this._updateMarkerPos(latlng);
    L.DomEvent.stopPropagation(e);
    this._updateEditDotPos();
  },
  _updateEditDotPos: function(){//改变中心点的位置
    var lngRadius = this._getLngRadius();
    var center = this._latlng;
    var lnglat = L.latLng(center.lat, center.lng + lngRadius);
    this.editRadiusDot.setLatLng(lnglat);
  },
  _onMovingEnd: function(){
    if(this.isEdit) return this.updateEdited();
    this.editRadiusDot.setStyle({
      fillOpacity: 0.0
    });
    this.setStyle({
      weight: 2,
      dashArray: '',
      color: '#0ff'
    });
  },

  _onScaling: function(e){
    if(!this.isDotDown) return;
    this.isEdit = true;
    var editRadiusDot = this.editRadiusDot;
    var map = this._map;
    var containerPoint = map.mouseEventToContainerPoint(e),
    layerPoint = map.containerPointToLayerPoint(containerPoint);
    var latlng = map.layerPointToLatLng(layerPoint);
    editRadiusDot.setLatLng(latlng);
    var center = this._latlng;
    var radius = center.distanceTo(L.latLng(center.lat, latlng.lng));
    this.setRadius(radius);
    this._updateInfoScaling();
  },

  _onScalingEnd: function(){
    this.isDotDown = false;
    if (this.isEdit) return this.updateEdited();
    this._updateCommon();
  },

  _updateInfoMoving: function(){
    var infoHtml =  '经度' + this._latlng.lat.toFixed(5) + ' | ' + '纬度' + this._latlng.lng.toFixed(5) ;
    this.infoMarker._icon.innerHTML = infoHtml;
  },

  _updateInfoScaling: function(){
    var infoHtml = '半径 ' + parseInt(this.getRadius()) + '米';
    this.infoMarker._icon.innerHTML = infoHtml;
  },

  _updateCommon: function(){
    this.editRadiusDot.setStyle({
      fillColor: '#0ff'
    });
    this.setStyle({
      color: '#0ff',
      dashArray: ''
    });
    var node = this.infoMarker._icon;
    node.setAttribute('class', 'leaflet-edit-node no-events');
  },
  updateEdited: function(){
    this.editRadiusDot.setStyle({
      fillColor: '#930',
    });
    this.setStyle({
      color: '#930',
      dashArray: '12, 6'
    });
    var node = this.infoMarker._icon;
    node.setAttribute('class', 'leaflet-edit-node leaflet-edit-node-submit');
    node.innerHTML = '提交';
    this._addButtonSubmitEvent();
  },
  _onOperationEnd: function(){
    if(this.isEdit) return this.updateEdited();
    this._updateCommon();
  },
  _addButtonSubmitEvent: function(){
    $(this.infoMarker._icon).off('click').on('click', this._onSubmit.bind(this));
  },
  _addButtonDeleteEvent: function(){
    $(this.infoMarker._icon).off('click').on('click', this._onDelete.bind(this));
  },
  _onDelete: function(){},
  _onSubmit: function (){
    $(this.infoMarker._icon).text('上传中..');
  },
  _onSubmitCallback: function (){
  },
  _onDeleteCallback: function (){},
});

var areas = [{
  id: '1',
  type: 'cycle',
  center: {
    lng: 122.207816,
    lat: 30.000736
  },
  radius: 2000,
  unit: 'm'
}, {
  id: '0',
  type: 'cycle',
  center: {
    lng: 122.101579,
    lat: 30.016749
  },
  radius: 1000,
  unit: 'm'
}, {
  id: '2',
  type: 'cycle',
  center: {
    lng: 122.377991,
    lat: 29.939664
  },
  radius: 800,
  unit: 'm'
}];

function drawCircle() {
  var center = L.latLng(39.90973623, 116.34521484);
  var map = this.map = L.map('map-container', {
    'center': center,
    'zoom': 10,
    'attributionControl': false,
    'crs': L.CRS.EPSG4326
  });
  var tileLayer = L.tileLayer('http://t.mapabc.com/maptile?t=3&x={x}&y={y}&z={z}').addTo(map);

  var circle = new EditCircle(center, 2000, {}).addTo(map);
  circle.addInfo({
    name: '22'
  });


  //   circle.on({
  //     mouseout: function(){
  //       console.log('movestart')
  //     },
  //     movestart: function(){
  //       console.log('movestart')
  //     },
  //     dragstart: function(){
  //       console.log('dragstart')
  //     },
  //     mousedown: function () {
  //       console.log('mousedown');
  //     map.on('mousemove', function(e) {
  //       circle.setLatLng(e.latlng);
  //     });
  //   },
  //   click: function () {
  //     map.removeEventListener();
  //   }
  // });

}



module.exports = drawCircle;