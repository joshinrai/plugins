/*
jquery leaflet
 */
var $ = require('jquery');

var Easing = require('@ali/common-utils/easing');
delete Easing.__filename;
var format = require('@ali/common-utils/color/format');
var blending = require('@ali/common-utils/color/blending');
var dat = require('dat-gui');
var Sprite = require('@ali/common-utils/sprite');
var ScatterCanvas = require('./../layer/scatter_canvas');
var Demo = require('./demo');
var dotData = require('./data/peopleBeijin');
delete dotData.__filename;

var easings = [];
for(var k in Easing){
  var easingObj = Easing[k];
  easings.push(k);
}

function ColorSelector(ctx) {
  this.ctx = ctx;
  this.background = '#222';
  this.hueFrom = 100;
  this.satFrom = 100;
  this.lightFrom = 50;
  this.opacityFrom = 1;

  this.blendingMode = 'rgb';

  this.hueTo = 180;
  this.satTo = 100;
  this.lightTo = 100;
  this.opacityTo = 0;
  this.easing = 'linear';
  this.inout = 'In';
  this.pow = 1;
  this.drawN = 6;


  this.spriteType = 'radian';

  this.colorFrom = '#ff0000';
  this.colorTo = '#8500fc';

  this.dotMapRadius = 20;
  this.blendingMap = 'source-over';

  this.init();
  this.redraw();
}

ColorSelector.prototype.getEasing = function () {
  return this.easing + '.' + this.inout + '.' + this.pow;
};

///////////////////////////init////////////////////////////////////
function createCanvas(node, size){
  size = size || 1;
  node = $(node);
  var w = node.width();
  var offset = w * (1 - size) / 2;
  var d = w * size;
  return $('<canvas width="'+d+'" height="' + d + '" style="position:relative;margin-left:' + offset + 'px; margin-top:' + offset + 'px;width:' + d + 'px; height:' + d + 'px;"></canvas>').appendTo(node)[0];
}
function createDiv(node, size){
  size = size || 1;
  node = $(node);
  var w = node.width();
  var offset = w * (1 - size) / 2;
  var d = w * size;
  return $('<div style="position:relative;margin-left:' + offset + 'px; margin-top:' + offset + 'px;width:' + d + 'px; height:' + d + 'px;"></div>').appendTo(node);
}

ColorSelector.prototype.init = function () {
  var titleNode = this.titleNode = $('.title');
  var spriteArea = this.spriteArea = $('.sprite-area');
  this.initSprite1();
  this.initSprite2();
  this.initMap();
  this.initDotLayer();
};

ColorSelector.prototype.initSprite1 = function () {
  var ctx = createCanvas(this.spriteArea, 0.6).getContext('2d');
  this.sprite1 = Sprite.gradient(ctx,{
    isContinue: false
  });
};

ColorSelector.prototype.initSprite2 = function () {
  var ctx = createCanvas(this.spriteArea, 0.6).getContext('2d');
  this.sprite2 = Sprite.gradient(ctx, {
    isContinue: true
  });
};

ColorSelector.prototype.initMap = function () {
  var map = this.map = new Demo();
  map.openDetect();
  map.setView([39.9, 116.4],12);
};

ColorSelector.prototype.initDotLayer = function () {
  var dotlayer = this.dotlayer = new ScatterCanvas(this.map, $('#canvas-container'));
  dotlayer.data(dotData);
};
///////////////////////////颜色计算////////////////////////////////////
ColorSelector.prototype.getColorFunc = function () {
  var colorFrom = this.colorFromA =  format.setOpacity(this.colorFrom, this.opacityFrom);
  var colorTo =  this.colorToA = format.setOpacity(this.colorTo, this.opacityTo);
  var easingFull =this.easingFull = this.getEasing();
  var blend = this.blend = blending(colorFrom, colorTo, {easing: easingFull, type: this.blendingMode});
  this.colorFunc = blend.toFunc();
};

ColorSelector.prototype.render = function () {
  this.getColorFunc();
  //第一列
  this.renderText();
  this.renderSpriteCanvas();
  //第二列
  this.renderDotmap();
};

ColorSelector.prototype.getColorFuncText = function () {
  return '引用blending模块, 色彩映射函数如下;<br><br>\
  var colorFunc = blending(\'' + this.colorFromA + '\', \'' + this.colorToA +'\', {easing:\'' + this.easingFull + '\',type:\'' + this.blendingMode +'\'}).toFunc();\
  ';
};

ColorSelector.prototype.redraw = function(){
  this.render();
  $('.script-area').html(this.getColorFuncText());
};

ColorSelector.prototype.renderText = function(){
  var text = '颜色函数->可视效果', html = '', textN = text.length;
  var colorFunc = this.colorFunc;
  for(var k in text){
    var color = colorFunc(k / textN);
    html += '<span style="color:' + color + '">'+ text[k] +'</span>';
  }
  this.titleNode.html(html);
}

ColorSelector.prototype.renderSpriteCanvas = function(){
  var opt = {
    type: this.spriteType,
    color: this.colorFunc,
    drawN: this.drawN,
  };
  this.sprite1.update(opt);
  this.sprite2.update(opt);
};

ColorSelector.prototype.renderDotmap = function(){
  var dotlayer = this.dotlayer;
  dotlayer.clean();
  dotlayer.updateSprite(this.sprite1.getCanvas());
  dotlayer.updateSize(this.dotMapRadius);
  dotlayer.updateBlending(this.blendingMap)
  dotlayer.render();
};

//dotRadius

function addGui(){
  var redraw = spriteDemo.redraw.bind(spriteDemo);

  var guiColorFunc = new dat.gui.GUI();
  guiColorFunc.addColor(spriteDemo, 'colorFrom').onChange(redraw);
  guiColorFunc.add(spriteDemo, 'opacityFrom', 0, 1).onChange(redraw);
  guiColorFunc.addColor(spriteDemo, 'colorTo').onChange(redraw);
  guiColorFunc.add(spriteDemo, 'opacityTo', 0, 1).onChange(redraw);
  guiColorFunc.add(spriteDemo, 'pow', 0, 10).onChange(redraw);
  guiColorFunc.add(spriteDemo, 'easing').options(easings).onChange(redraw);
  guiColorFunc.add(spriteDemo, 'inout').options(['In', 'Out', 'InOut']).onChange(redraw);
  guiColorFunc.add(spriteDemo, 'blendingMode').options(['rgb', 'hsl']).onChange(redraw);

  var guiElement = new dat.gui.GUI();
  guiElement.add(spriteDemo, 'drawN', 0, 15).onChange(redraw);
  guiElement.add(spriteDemo, 'spriteType').options(['radian', 'linear']).onChange(redraw);
  guiElement.add(spriteDemo, 'dotMapRadius', 1, 150).onChange(redraw);
  guiElement.add(spriteDemo, 'blendingMap').options(['lighter', 'source-over']).onChange(redraw);
}

function Test() {
  spriteDemo = new ColorSelector();
  addGui();
}

module.exports = Test;