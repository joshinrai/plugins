 # app.coffee 
 # honeycomb - lib/app.coffee
 # Copyright(c) 2014 Alibaba.com
 # Author: jifeng.zjd <jifeng.zjd@taobao.com>
 
os = require 'options-stream'
fs = require 'fs'
tool = require './util'
path = require 'path'
ep = require 'event-pipe'

class App
  constructor : (options, LOG) ->
    @log = LOG || console
    @options = os {
      dir: '' #app目录地址
    }, options
    if false is fs.existsSync @options.dir
      @err = new Error('App File NOT Found: ' + JSON.stringify(options))
      return @log.error @err
    @config = tool.getAppconfig @options.dir

    if @config is undefined
      @err = new Error('Read App Config Error: ' + JSON.stringify(options)) 
      return @log.error @err

    @serverConfig = os {
      run:
        development: true
      serverPath: __dirname
    }, options.serverConfig

    @development = if [true, 'true'].indexOf(@serverConfig.run.development) > -1 then true else false

    @sock = process.cwd() + "/run/#{encodeURIComponent(@config.name)}@#{@config.version}-#{process.pid}.sock"
    if @development is false
      @sock = path.join @serverConfig.serverPath, "../../run/#{encodeURIComponent(@config.name)}@#{@config.version}-#{process.pid}.sock" 
    @config.sock = @sock

    
    process.on 'exit', ()=>
      if fs.existsSync(@sock)
        fs.unlinkSync(@sock)
    @



  _init: (cb)->
    return cb() if @config is undefined
    dir = @options.dir
    initFiles = @config.init
    if !initFiles or Object.keys(initFiles).length is 0
      return cb()
    e = ep()
    e.on 'error', (err) ->
      cb err
    for file, v of initFiles
      e.lazy () ->
        f = path.join dir, file
        item = require f
        val = item v
        return @ null if val.ready is undefined
        val.ready @
    e.lazy ()->
      cb()
    e.run()


  run : (cb) ->
    config = @config or {}
    return cb @err if @err
    @_init (err)=>
      return cb err if err
      extensions = @config.extensions

      
      if typeof extensions is 'object'
        info = Object.keys(extensions)[0]
        serverFile = path.join @options.dir, info
        options = extensions[info]
        try
          server = require serverFile
        catch e
          return cb e
        app = server options
        return app.ready (err, appServer)=>
          return cb err if err
          appServer.listen @sock, ()=>
            cb and cb(null, config)

     
      serverFile = path.join @options.dir, extensions
      try
        server = require serverFile
      catch e
        return cb e
      
      server.listen @sock, ()=>
        cb and cb(null, config)

module.exports = (options, log)->
  new App options, log