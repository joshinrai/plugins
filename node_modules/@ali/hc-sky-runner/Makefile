TESTS             = $(shell find tests -type f -name test-*)

-COVERAGE_DIR    := out/test/
-RELEASE_DIR     := out/release/

-COVERAGE_COPY   := lib tests node_modules views assets
-RELEASE_COPY    := lib etc tests views assets

-BIN_MOCHA       := ./node_modules/.bin/mocha
-BIN_ISTANBUL    := ./node_modules/.bin/istanbul

-TESTS           := $(sort $(TESTS))

-BIN_COFFEE      := ./node_modules/coffee-script/bin/coffee
-COFFEE_LIB      := $(shell find lib -type f -name '*.coffee')
-COFFEE_TEST     := $(shell find tests -type f -name 'test-*.coffee')


-COVERAGE_FILE   := coverage/index.html
-COVERAGE_FILE   := $(addprefix $(-COVERAGE_DIR),$(-COVERAGE_FILE))
-COVERAGE_TESTS  := $(addprefix $(-COVERAGE_DIR),$(-TESTS))
-COVERAGE_TESTS  := $(-COVERAGE_TESTS:.coffee=.js)


-GIT_REV         := $(shell git show | head -n1 | cut -f 2 -d ' ')
-GIT_REV         := $(shell echo "print substr('$(-GIT_REV)', 0, 8);" | /usr/bin/env perl)

default: dev

-common-pre: clean -npm-install 
	@mkdir -p run

dev: -common-pre
	@$(-BIN_MOCHA) \
		--colors \
		--compilers coffee:coffee-script/register \
		--reporter spec \
		--growl \
		$(-TESTS)

test: -common-pre
	@$(-BIN_MOCHA) \
		--no-colors \
		--compilers coffee:coffee-script/register \
		--reporter tap \
		$(-TESTS)

-pre-test-cov: -common-pre
	@echo 'copy files'
	@mkdir -p $(-COVERAGE_DIR)

	@rsync -av . $(-COVERAGE_DIR) --exclude out --exclude .git
	@rsync -av ./node_modules $(-COVERAGE_DIR)
	@$(-BIN_COFFEE) -cb out/test
	@find ./out/test -path ./out/test/node_modules -prune -o -name "*.coffee" -exec rm -rf {} \;

test-cov: -pre-test-cov
	@cd $(-COVERAGE_DIR) && \
		$(-BIN_ISTANBUL) cover ./node_modules/.bin/_mocha -- -u bdd -R tap  --compilers coffee:coffee-script $(patsubst $(-COVERAGE_DIR)%, %, $(-COVERAGE_TESTS)) && \
	  $(-BIN_ISTANBUL) report html
		@if [ `echo $$OSTYPE | grep -c 'darwin'` -eq 1 ]; then open $(-COVERAGE_FILE); else gnome-open $(-COVERAGE_FILE); fi

-release-pre : -common-pre
	@echo 'copy files'
	@mkdir -p $(-RELEASE_DIR)

	@if [ `echo $$OSTYPE | grep -c 'darwin'` -eq 1 ]; then \
		cp -r $(-RELEASE_COPY) $(-RELEASE_DIR); \
	else \
		cp -rL $(-RELEASE_COPY) $(-RELEASE_DIR); \
	fi
	@echo $(-GIT_REV)
	@echo "$(-RELEASE_DIR)etc/config.yaml"
	@cat $(-RELEASE_DIR)etc/config.yaml | sed 's/@@rev@@/$(-GIT_REV)/g' > $(-RELEASE_DIR)etc/config.backup.yaml
	@mv -f $(-RELEASE_DIR)etc/config.backup.yaml  $(-RELEASE_DIR)etc/config.yaml
	@cd $(-RELEASE_DIR)

	@cp package.json $(-RELEASE_DIR)
	@cd $(-RELEASE_DIR) && PYTHON=`which python2.6` tnpm --color=false install --production


release: -release-pre
	@rm -fr $(-RELEASE_DIR)/tests
	@mv $(-RELEASE_DIR)/etc/webhook.admin.yaml $(-RELEASE_DIR)/etc/webhook.yaml
	@echo "all codes in \"$(-RELEASE_DIR)\""

.-PHONY: default

-npm-install:
	PYTHON=`which python2.6` tnpm install

clean:
	@echo 'clean'
	@-rm -fr out
