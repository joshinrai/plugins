'use strict';
/**
 * parse 将颜色解析为统一格式 支持 rgb(255,255,255) rgba(255,255,255,1), hsl(0,100%,100%) hsla(0,100%,100%,1) #fff #ffffff
 * @param  {String} str 传入的色彩参数
 * @return {Object}     自定义的色彩中间量
 */
function parse(str) {
  if (str === '' || str === undefined || str === null) return console.log('木有颜色参数');
  if(typeof(str) === 'object' && str.type) return str; 
  var l, ll, lll, llll;
  if (str.indexOf('#') !== -1) { // #fff / #ffffff 型色彩
    var hexes = str.split('#')[1],
      hexN = hexes.length;
    if (hexN === 3) {
      l = parseInt(hexes[0], 16);
      l = l * 16 + l;
      ll = parseInt(hexes[1], 16);
      ll = ll * 16 + ll;
      lll = parseInt(hexes[2], 16);
      lll = lll * 16 + lll;
    } else if (hexN === 6) {
      l = parseInt(hexes[0], 16) * 16 + parseInt(hexes[1], 16);
      ll = parseInt(hexes[2], 16) * 16 + parseInt(hexes[3], 16);
      lll = parseInt(hexes[4], 16) * 16 + parseInt(hexes[5], 16);
    } else {
      return console.log('#标记色彩 格式错误');
    }
    return {
      type: 'rgba',
      arr: [l, ll, lll, 1]
    };
  } else { //rgba() / rgb()/ hsl() hsla() 型色彩
    var strs = str.split(','),
      type, strsN = strs.length;
    l = parseInt(strs[0].split('(')[1], 10);
    ll = parseInt(strs[1].split('%')[0], 10);
    lll = parseInt(strs[2].split('%')[0], 10);
    llll = (strsN === 4) ? parseFloat(strs[3], 10) : 1;
    return {
      type: (str.indexOf('hsl') !== -1) ? 'hsla' : 'rgba',
      arr: [l, ll, lll, llll]
    };
  }
}

function setOpacity(c, opacity) {
  c = parse(c);
  c.arr[3] = opacity;
  return toString(c);
}

function rgb2hsl(r, g, b, a) {
  if(typeof(r) === 'object') {
    if(r.type.indexOf('hsl') !== -1) return r;
    var arr = r.arr;
    return rgb2hsl(arr[0], arr[1], arr[2], arr[3]);
  } 
  r = r / 255;
  g = g / 255;
  b = b / 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2, d = max - min;

    if (max === min) {
        h = s = 0;
    } else {
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

        switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2;               break;
            case b: h = (r - g) / d + 4;               break;
        }
        h /= 6;
    }
    return {
      type: 'hsla',
      arr: [Math.floor(h * 360), Math.floor(s * 100), Math.floor(l * 100), a || 0]
    };
}


// function rgb2hsv (rgb){
//   if(typeof(rgb) === 'object'){

//   } else if(typeof(rgb) === 'string'){

//   }
// }

// function rgb2hsv (r, g, b, o) {
//   var h = 

// }

// console.log(parseColor('#0ff'),parseColor('#00ffff'),parseColor('rgb(0,255,255)'),parseColor('rgba(0,255,255,1)'),parseColor('hsl(180,100%,50%)'),parseColor('hsla(180,100%, 50%, 0.5)'));
/**
 * toString 把标准色彩格式转化为 string
 * @param  {Object} obj 标准格式
 * @return {String}     标准web色
 */
var floor = Math.floor;
function toString(obj) {
  if(!obj || !obj.type || !obj.arr) return console.log('颜色格式不对');
  var arr = obj.arr, type = obj.type;
  if(type === 'rgba') return type + '(' + floor(arr[0]) + ',' + floor(arr[1]) +  ',' + floor(arr[2]) +  ',' + arr[3] + ')';
  if(type === 'hsla') return type + '(' + floor(arr[0]) + ',' + floor(arr[1]) +  '%,' + floor(arr[2]) +  '%,' + arr[3] + ')';
  return console.log('颜色格式不对');
}
// console.log(parseColor('#0ff'),parseColor('#00ffff'),parseColor('rgb(0,255,255)'),parseColor('rgba(0,255,255,1)'),parseColor('hsl(180,100%,50%)'),parseColor('hsla(180,100%, 50%, 0.5)'));
module.exports = {'parse': parse, 'toString': toString, 'setOpacity': setOpacity, rgb2hsl: rgb2hsl};
