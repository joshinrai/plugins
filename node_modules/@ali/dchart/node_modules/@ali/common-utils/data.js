/**
 * normalizeData 将函数可视化的维度，映射到0-1
 * @param {Array} ds   传入的数据
 * @param {String} vKey 用来可视化的维度
 * @return {[type]}  处理过的数据
 */
function normalizeData(ds, vKey) {
  var vMax, d, v;
  for (var k in ds) {
    d = ds[k];
    v = parseFloat(d[vKey]);
    vMax = (!vMax) ? v : Math.max(v, vMax);
  }

  vMax = vMax || 0.0000001;
  for (var i in ds) {
    d = ds[i];
    d.vFormat = d[vKey] / vMax;
  }
  return ds;
}

//标准化
function getLat(d){
  var pos = d.pos || d.center || d.position;
  if(pos) d = pos;
  return d[0] || d.lat;
}

function getLng(d){
  var pos = d.pos || d.center || d.position;
  if(pos) d = pos;
  return d[1] || d.lng;
}

function getTime(d, index) {
  var t = d.time || d.t;
  if(t) return new Date(t).getTime();
  return  index || 0;
}

function _getType(obj){
  if(Array.isArray(obj)) return 'array';
  if(typeof(obj) === 'object') return 'object'
  return;
}

function getID (d) {
  return d.id
}

/**
 * mapReduce mapReduce过程
 * @param  {Object/Array} ds      [description]
 * @param  {[type]} options [description]
 * @return {[type]}         [description]
 */
function mapReduce(ds, options){
  var map = options.map, reduce = options.reduce;
  var middle = {};
  var out = {};
  var k, v, key, value, pair;
  for (var k in ds) {
    if (ds.hasOwnProperty(k)) {
      v = ds[k]; 
      pair = map(k, v);
      key = pair.key, value = pair.value;
      if(!out[key]){
        out[key] = [value];
      } else {
        out[key].push(value);
      }
    }
  }
  if (!reduce) return out;
  for (var k in out) {
    out[k] = reduce(k, out[k]);
  }
  return out;
}


var schemas = {
  lat: {
    desc: '经度',
    type: 'number',
    range: [-180, 180]
  },
  lng: {
    desc: '纬度',
    type: 'number',
    range: [-90, 90]
  }
}

/**
 * getSchema 根据不同的输入 生成schema
 * @param  {Object/String} a 关键字或对象
 * @return {Object}   schema 对象
 */
function getSchema(a) {
  if(typeof(a) === 'string'){
    var schema = schemas[a];
    if(!schema) return;
    schema.key = a;
  }
}

// var array = [[120,100], [22,33], [22,333]];
// var out = mapReduce(array, {
//   map: function (k, arr){
//     return {
//       key: arr[0],
//       value: arr
//     }
//   },
//   reduce: function(k, values){
//     return values.length;
//   }
// });
// // out : {22: 2, 120: 1}


// filter
module.exports = {
  'normalizeData': normalizeData,
  'getSchema': getSchema,
  'getLat': getLat,
  'getLng': getLng,
  'mapReduce': mapReduce,
  'getTime': getTime
};