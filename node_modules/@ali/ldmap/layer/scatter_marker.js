var $ = require('jquery');
var L = require('leaflet');
require('./../render/canvas');
require('./../core/utils');
var dmap = L.dmap = L.dmap || {};
var Utils = dmap.Utils;
var Event = require('bcore/event');

//
require('./../index.css');
require('./scatter_marker.css');

/**
 * @class ScatterMarker
 */
var Marker = L.Marker;
function ScatterMarker(options) {
  options = this.options = Utils.deepMerge(ScatterMarker.options, options);
  this.initialize(options);
}
var ScatterMarker = Event.extend(ScatterMarker, {
  initialize: function (options) {
    this.initDom();
  },
  initDom: function(){
    var options = this.options;
    var icon = L.divIcon({
      className: 'circle-node'
    });
    var marker = this.marker = new Marker([0,0], {
      icon: icon
    });
    var genPopup = options.genPopup.bind(this);
    if (genPopup){
      genPopup(marker);
    }
  },
  addTo: function(map){
    if(!map) return;
    this._map = map;
    this.marker.addTo(map);
    this.initDomIcon();
    this.initEventsMarker();
  },
  initEventsMarker: function(){
    var self = this;
    this.marker.on('click', function(){
      self.emit('click', {
        id: self.id,
        com: self
      });
    });
  },
  initDomIcon: function(){
    var genHtml = this.options.shape.html.bind(this);
    if(!genHtml) return;
    var marker = this.marker;
    var container = this.container = $(marker._icon);
    genHtml(container);
  },

  data: function(d) {
    if(!d) return;
    this._data = d;
    this.updateData(d);
  },

  updateData: function(d){
    var options = this.options;
    //
    
    var getId = options.id;
    var id = getId(d);
    if(id!==null && id !== undefined) this.id = id;
    //
    // var getSize = options.size;
    // this.updateRadius(getSize(d));
    //
    var getLng = options.lng;
    var getLat = options.lat;
    var lat = getLat(d);
    var lng = getLng(d);
    this.updateCenter(lat, lng);

    var getText = options.text;
    if(getText){
      var text = getText(d);
      this.updateText(text);
    }

    var applyCss = options.applyCss.bind(this);
    if(applyCss) applyCss(d, this.textNode);

    var getPopup = options.popup.bind(this);
    if(getPopup) getPopup(d);
  },

  updateZIndex: function(){
    if(this._zIndex) this.container.css({zIndex: this._zIndex});
  },

  updateText: function(text){
    if(text === this._text) return;
    this._text = text;
    var textNode = this.textNode;
    if(textNode) textNode.text(text);
  },

  updateCenter: function(lat, lng){
    if(!lat || !lng || (lat === this._clat && lng === this._clng)) return;
    this._clat = lat;
    this._clng = lng;
    this.marker.setLatLng(L.latLng(lat, lng));
  },

  render: function (d) {
    if (d) this.data(d);
  },

  /**
   * destroy  销毁
   */
  destroy: function () {
    this.marker.off();
    this._map.removeLayer(this.marker);
  }
});

ScatterMarker.options = {
    lat: Utils.getLat,
    lng: Utils.getLng,
    id: function (d) {
      return d.id;
    },
    // 'size': function (d, min, max) {
    //   return 20;
    // },
    'text': function (d) {
      return d.count;
    },
    popup: function (d) {
      this.marker.bindPopup(d[5], {offset: [0, -this.radius || -25]});
    },
    'genPopup': function(){
      this.marker.bindPopup('<p class="person-label">loading...</p>', {offset: [0, -20]});
    },
    'shape':{
      'html': function(node) {
        var aniCss = {};
        node.html('<div class="alarm-circle interactive-circle"></div>').css(aniCss);
        this.textNode = node.find('.interactive-circle');
      },
    }
  };

dmap.ScatterMarker = ScatterMarker;
dmap.scatterMarker = function(options) {
  return new ScatterMarker(options);
};

module.exports = ScatterMarker;