'use strict';
var L = require('leaflet');
var $ = require('jquery');
require('keyanim');
var AnimView = require('./../core/anim_view');
require('./../render/canvas');
var Utils = require('@ali/map-utils');
var dmap = L.dmap = L.dmap || {};
/**
 * @class AnimMarker
 */
function AnimMarker(opt) {
  this.initialize(opt);
}

AnimMarker = AnimView.extend(AnimMarker, {
  className: '',
  animClassName: '',
  latlngRomote: L.latLng(200, 200),
  isInit: false,
  initialize: function (opt) {
    if (this.isInit) return;
    Utils.merge(this, opt);
    var icon = this.icon = L.divIcon({
      className: this.className,
      html: '',
      iconSize: null
    });
    var marker = this.marker = L.marker(this.latlngRomote, {
      icon: icon
    });
    this.node = $(marker._icon);
    this.addEvents();
    this.isInit = true;
  },
  addTo: function(map){
    this._map = map;
    this.marker.addTo(map);
    if (this.isAutoStart && this._data) return this.startAnim();
  },
  startAnim: function () {
    var self = this, node = this.node;
    this.isLooping = true;
    node.clearAnim();
    node.addClass(this.animClassName);
    window.clearTimeout(this.loopId);

    this.fire('lifestart');
    this.loopId = setTimeout(function () {
      self.fire('hide', self);
      self.fire('lifeend');
    }, Math.floor(this.life * 1000));

    node.keyAnim(this.animClass || 'fadeInOut', {
      time: this.life,
      cb: function () {
        $(this).clearAnim();
      }
    });
  },

  pause: function () {
    this.options.isLooping = false;
    this.node.pause();
  },

  resume: function () {
    this.node.resume();
  },

  render: function (data) {
    this._init();
    this.data(data);
  },

  addEvents: function () {
    var self = this;
    this.on('lifeend', function () {
      if (self.options.isAutoDestroy) return self.destroy();
      self.onHide();
    });
  },

  /**
   * data 传入可视化数据
   * @param  {Object} visDatas 需要可视化的数据
   * @param  {Object} opt      配置参数
   */
  data: function (data) {
    if (!data) return;
    this._data = data;
    this.update(data);
    if (this.isAutoStart && this._map) return this.startAnim();
  },

  update: function (data) {
    this.updatePos(data.pos);
    this.updateText(data.text);
  },

  updatePos: function (d) {
    if (!d) return;
    var latlng = d.latlng || L.latLng(d.lat, d.lng);
    this.marker.setLatLng(latlng);
  },

  updateText: function (text) {
    if (!text) return;
    this.node.text(text);
  },

  onHide: function () {
    this.marker.setLatLng(this.latlngRomote);
  },

  hide: function () {//移到遥远的地方
  },

  /**
   * destroy  销毁canvas
   */
  destroy: function () {
    this.map.removeLayer(this.marker);
    this.off();
  }
});

dmap.AnimMarker = AnimMarker;
dmap.animMarker = function (opt) {
  return new AnimMarker(opt);
};

module.exports = AnimMarker;