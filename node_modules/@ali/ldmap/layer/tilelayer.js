var L = require('leaflet');
/**
 * @class TileLayer
 */
var TileLayer = L.TileLayer.extend({
  initialize: function(names, options) {
    if(typeof(names)!=='string') return console.log('输入必须为字符形式');
    if(names.indexOf('{') !== -1) return L.TileLayer.prototype.initialize.call(this, names, options);
    var tData = this.tData = TileLayer.tData;

    var parts = names.split('.');

    var tName = parts[0];
    var variantName = parts[1];

    if (!tData[tName]) {
      throw '没有对应的图层 (' + tName + ')';
    }

    var tileObj = {
      url: tData[tName].url,
      options: tData[tName].options
    };
    if (variantName && 'variants' in tData[tName]) {
      if (!(variantName in tData[tName].variants)) {
        throw 'No such variant of ' + tName + ' (' + variantName + ')';
      }
      var variant = tData[tName].variants[variantName];
      var variantOptions;
      if (typeof variant === 'string') {
        variantOptions = {
          variant: variant
        };
      } else {
        variantOptions = variant.options;
      }
      tileObj = {
        url: variant.url || tileObj.url,
        options: L.Util.extend({}, tileObj.options, variantOptions)
      };
    } else if (typeof tileObj.url === 'function') {
      tileObj.url = tileObj.url(parts.splice(1, parts.length - 1).join('.'));
    }

    var attributionReplacer = function(attr) {
      if (attr.indexOf('{attribution.') === -1) {
        return attr;
      }
      return attr.replace(/\{attribution.(\w*)\}/,
        function(match, attributionName) {
          // return attributionReplacer(providers[attributionName].options.attribution);
        }
      );
    };

    tileObj.options.attribution = attributionReplacer(tileObj.options.attribution);

    var layerOpts = L.Util.extend({}, tileObj.options, options);
    L.TileLayer.prototype.initialize.call(this, tileObj.url, layerOpts);
  },
  getData: function() {
    var tData = this.tData;
    var tile, variants, group, result = {};
    for (var tName in tData) {
      tile = tData[tName];
      variants = tile.variants;
      result[tName] = group = {};
      if (variants) {
        for (var vName in variants) {
          var variant = variants[vName];
          group[vName] = {
            name: vName,
            open: false
          };
        }
      }
    }
    return result;
  }
});

//地图搜集
var atlasVariants = {
  'road': '4',
  'roadLabel': '2',
  'region': '8',
  'poi': '1'
};

var amapAttribution = '&copy; <a href="http://www.amap.com/">高德地图</a>';

TileLayer.tData = {
  AMapDark: {
    'url': 'http://t.mapabc.com/maptile?t=3&x={x}&y={y}&z={z}',
    'options': {
      'attribution': amapAttribution,
      'minZoom': 2,
      'maxZoom': 18,
      'name': '深色(高德)'
    }
  },
  AMapLight: {
    'url': 'http://t.mapabc.com/maptile?t=2&x={x}&y={y}&z={z}',
    'options': {
      'attribution': amapAttribution,
      'minZoom': 2,
      'maxZoom': 18,
      'name': '浅色(高德)'
    }
  },
  AtlasLight: {
    'url': 'http://42.120.180.211:8080/mapservice?t=1&c={variant}&x={x}&y={y}&z={z}&size=1&v=light',
    'options': {
      'attribution': amapAttribution,
      'minZoom': 2,
      'maxZoom': 15,
      'variant': '4',
      'name': 'Atlas白(高德)'
    },
    variants: atlasVariants
  },
  AtlasDark: {
    'url': 'http://42.120.180.211:8080/mapservice?t=1&c={variant}&x={x}&y={y}&z={z}&size=1&v=dark',
    'options': {
      'attribution': amapAttribution,
      'minZoom': 2,
      'maxZoom': 15,
      'variant': '4',
      'name': 'Atlas深灰(高德)'
    },
    variants: atlasVariants
  },
  AtlasBlue: {
    'url': 'http://42.120.180.211:8080/mapservice?t=1&c={variant}&x={x}&y={y}&z={z}&size=1&v=blue',
    'options': {
      'attribution': amapAttribution,
      'minZoom': 2,
      'maxZoom': 15,
      'variant': '4',
      'name': 'Atlas蓝(高德)'
    },
    variants: atlasVariants
  },
  OpenStreetMap: {
    url: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    options: {
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      'name': 'OSM'
    },
    variants: {
      Mapnik: {},
      BlackAndWhite: {
        url: 'http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png'
      },
      DE: {
        url: 'http://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png'
      },
      HOT: {
        url: 'http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
        options: {
          attribution: '{attribution.OpenStreetMap}, Tiles courtesy of <a href="http://hot.openstreetmap.org/" target="_blank">Humanitarian OpenStreetMap Team</a>'
        }
      }
    }
  },
  MapBox: {
    url: function(id) {
      return 'http://{s}.tiles.mapbox.com/v3/' + id + '/{z}/{x}/{y}.png';
    },
    options: {
      attribution: 'Imagery from <a href="http://mapbox.com/about/maps/">MapBox</a> &mdash; ' +
        'Map data {attribution.OpenStreetMap}',
      subdomains: 'abcd',
      'name': 'mapbox'
    }
  },
  Stamen: {
    url: 'http://{s}.tile.stamen.com/{variant}/{z}/{x}/{y}.png',
    options: {
      attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, ' +
        '<a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; ' +
        'Map data {attribution.OpenStreetMap}',
      subdomains: 'abcd',
      minZoom: 0,
      maxZoom: 20,
      variant: 'toner',
      'name': 'stamen 黑白'
    },
    variants: {
      Toner: 'toner',
      TonerBackground: 'toner-background',
      TonerHybrid: 'toner-hybrid',
      TonerLines: 'toner-lines',
      TonerLabels: 'toner-labels',
      TonerLite: 'toner-lite',
      Terrain: {
        options: {
          variant: 'terrain',
          minZoom: 4,
          maxZoom: 18
        }
      },
      TerrainBackground: {
        options: {
          variant: 'terrain-background',
          minZoom: 4,
          maxZoom: 18
        }
      },
      Watercolor: {
        options: {
          variant: 'watercolor',
          minZoom: 1,
          maxZoom: 16
        }
      }
    }
  },
  Esri: {
    url: 'http://server.arcgisonline.com/ArcGIS/rest/services/{variant}/MapServer/tile/{z}/{y}/{x}',
    options: {
      variant: 'World_Street_Map',
      attribution: 'Tiles &copy; Esri',
      name: 'ESRI'
    },
    variants: {
      WorldStreetMap: {
        options: {
          attribution: '{attribution.Esri} &mdash; ' +
            'Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
        }
      },
      DeLorme: {
        options: {
          variant: 'Specialty/DeLorme_World_Base_Map',
          minZoom: 1,
          maxZoom: 11,
          attribution: '{attribution.Esri} &mdash; Copyright: &copy;2012 DeLorme'
        }
      },
      WorldTopoMap: {
        options: {
          variant: 'World_Topo_Map',
          attribution: '{attribution.Esri} &mdash; ' +
            'Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
        }
      },
      WorldImagery: {
        options: {
          variant: 'World_Imagery',
          attribution: '{attribution.Esri} &mdash; ' +
            'Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        }
      },
      WorldTerrain: {
        options: {
          variant: 'World_Terrain_Base',
          maxZoom: 13,
          attribution: '{attribution.Esri} &mdash; ' +
            'Source: USGS, Esri, TANA, DeLorme, and NPS'
        }
      },
      WorldShadedRelief: {
        options: {
          variant: 'World_Shaded_Relief',
          maxZoom: 13,
          attribution: '{attribution.Esri} &mdash; Source: Esri'
        }
      },
      WorldPhysical: {
        options: {
          variant: 'World_Physical_Map',
          maxZoom: 8,
          attribution: '{attribution.Esri} &mdash; Source: US National Park Service'
        }
      },
      OceanBasemap: {
        options: {
          variant: 'Ocean_Basemap',
          maxZoom: 13,
          attribution: '{attribution.Esri} &mdash; Sources: GEBCO, NOAA, CHS, OSU, UNH, CSUMB, National Geographic, DeLorme, NAVTEQ, and Esri'
        }
      },
      NatGeoWorldMap: {
        options: {
          variant: 'NatGeo_World_Map',
          maxZoom: 16,
          attribution: '{attribution.Esri} &mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC'
        }
      },
      WorldGrayCanvas: {
        options: {
          variant: 'Canvas/World_Light_Gray_Base',
          maxZoom: 16,
          attribution: '{attribution.Esri} &mdash; Esri, DeLorme, NAVTEQ'
        }
      }
    }
  }
};

var dmap = L.dmap = L.dmap || {};
dmap.TileLayer = TileLayer;
dmap.tileLayer = function(name, options) {
  return new dmap.TileLayer(name, options);
};

module.exports = TileLayer;
