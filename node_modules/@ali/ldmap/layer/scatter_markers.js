var L = require('leaflet');
require('./../core/utils');
var Event = require('bcore/event');
var ScatterMarker = require('./scatter_marker');
var dmap = L.dmap = L.dmap || {};
var Utils = dmap.Utils;
var $ = require('jquery');
/**
 * @class ScatterMarkers
 */
function ScatterMarkers(options) {
  options = this.options = Utils.deepMerge(ScatterMarkers.options, options);
  this.initialize(options);
  this.options.scatter.getId = this.options.getId;
  this.options.scatter.text = this.options.text;
}

ScatterMarkers.options = {
    lat: Utils.getLat,
    lng: Utils.getLng,
    filter: function (d, zoom) {
      return (d[1] * zoom > 30);
    },
    getId: function (d, i) {
      return d.id || i;
    },
    text: function (d) {
      return d.text;
    },
    zoom: {
      max: 15,
      min: 3
    },
    scatter: {
      size: function (d, min, max) {
        return 15;
      },
      shape: {
        normal: {
        }
      }
    }
  };


ScatterMarkers = Event.extend(ScatterMarkers, {
  initialize: function (options) {
    this.cache = {};
    this.isable = true;
  },

  addTo: function (map) {
    if (!map) return;
    this._map = map;
    this.initEventsMap();
  },

  data: function (d) {
  },

  //清除所有显示
  clean: function () {
    var cache = this.cache, obj, visual;
    if (!cache) return;
    for (var id in cache) {
      obj = cache[id];
      visual = obj.visual;
      if (visual && visual.destroy) {
        visual.destroy();
        delete obj.visual;
      }
    }
  },

  updateData: function (ds) {
    this.processing(ds);
    this.cleanOld();
  },
  updateFilter: function (filter){
    if (typeof (filter) !== 'function') return;
    this.options.filter = filter;
    this.updateMap();
  },
  cleanOld: function () {
    var versionID = this.versionID;
    var cache = this.cache, obj, visual, vid;
    if (!versionID || !cache) return;
    for (var id in cache) {
      obj = cache[id];
      vid = obj.versionID;
      if (vid !== versionID) {
      visual = obj.visual;
      if (visual) {
        visual.off && visual.off();
        visual.destroy && visual.destroy();
      } 
      delete cache[id];
      }
    }
  },
  processing: function (ds) {
    var versionID = this.versionID = Math.random();
    var map = this._map;
    if (!map) return;
    var options = this.options;
    var scatterOpt = options.scatter;
    var d, id, lat, lng, obj, visual, isInZoom = this.isInZoom();
    var getId = options.getId, getLat = options.lat, getLng = options.lng;
    var filter = options.filter;
    var zoom = this._map.getZoom();
    var cache = this.cache;
    var isable = this.isable;

    for (var i in ds) {
      d = ds[i];
      id = getId(d, i);
      lat = getLat(d);
      lng = getLng(d);
      obj = cache[id];

      if (obj) {
        obj.data = d;
      } else {
        obj = cache[id] = {
          'data': d
        };
      }

      obj.versionID = versionID;
      var isFilter = filter(d, zoom);

      // 更新绘制
      if (isInZoom && isFilter && this.isInView(lat, lng) && isable) {
      var visual = obj.visual;
      if(visual){
          visual.updateData(d);
      } else if (isable) {
        visual = obj.visual =  new ScatterMarker(scatterOpt);
        visual.addTo(map);
        visual.render(d);
        this.initEventsScatter(visual);
       }
      }
    }
  },
  render: function(ds){
    if(!ds) return;
    this.updateData(ds);
  },
  enable: function() {
    this.isable = true;
  },
  disable: function() {
    this.isable = false;
  },
  isInZoom: function(){
    var zoomOpt = this.options.zoom;
    if(!zoomOpt) return true;
    var map = this._map;
    var maxZoom = zoomOpt.max;
    var minZoom = zoomOpt.min;
    var zoom = map.getZoom();
    if(zoom > maxZoom || zoom < minZoom) return false;
    return true;
  },
  isInView: function (lat, lng, viewBounds) {
    viewBounds = viewBounds || this._map.getBounds();
    var lngMax = viewBounds._northEast.lng;
    var latMax = viewBounds._northEast.lat;
    var lngMin = viewBounds._southWest.lng;
    var latMin = viewBounds._southWest.lat;
    return ((lat < latMax) && (lat > latMin) && (lng < lngMax) && (lng > lngMin));
  },
  updateMap: function(){
    var options = this.options;
    var cache = this.cache, obj, visual, lat, lng, d;
    var getLng = options.lng, getLat = options.lat;
    var isFilter, filter = options.filter;
    var zoom = this._map.getZoom();
    var isInView, isInZoom = this.isInZoom();
    if(!isInZoom) return this.clean();
    if(!cache) return;
    if(!this.isable) return;
    var scatterOpt = this.options.scatter;
    var map = this._map;
    for (var id in cache) {
      obj = cache[id];
      d = obj.data;
      lat = getLat(d);
      lng = getLng(d);
      isInView = this.isInView(lat, lng);
      isFilter = filter(d, zoom);
      visual = obj.visual;
      if(visual){
        visual.updateZIndex();
      }
      if(!isInView || !isFilter){
        if (visual){
         visual.off && visual.off();
         visual.destroy && visual.destroy();
         delete obj.visual;
       } 
      }else{
        if (!visual){
          visual = obj.visual = new ScatterMarker(scatterOpt);
          visual.addTo(map);
          visual.render(obj.data);
          this.initEventsScatter(visual);
       } 
      }
    }
  },

  initEventsMap: function(){
    this._map.on('moveend', this.updateMap.bind(this));
  },
  initEventsScatter: function(scatter){
    var self = this;
    scatter.on('click', function(d){
      self.emit('click-scatter', d);
    });
  },
  /**
   * destroy  销毁canvas
   */
  destroy: function () {
  }
})

dmap.ScatterMarkers = ScatterMarkers;
dmap.scatterMarkers = function(opt) {
  return new ScatterMarkers(opt);
};

module.exports = ScatterMarkers;