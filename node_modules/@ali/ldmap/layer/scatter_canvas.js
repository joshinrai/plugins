var L = require('leaflet');
require('./../render/canvas');
require('./../core/utils');
var dmap = L.dmap = L.dmap || {};
var Utils = dmap.Utils;
/**
 * @class ScatterCanvas
 */

  function createSprite (hue) {
    var hueFrom = (hue - 10) % 360;
    var hueTo = (hue + 10) % 360;
    return getSprite({
      'drawN': 1.15,
      'color': {
        from: 'hsla('+hueFrom+',100%,75%,0.8)',
        to: 'hsla('+hueTo+',100%,50%,0.03)',
        easing: 'Linear.None.1.7',
        space: 'rgb'
      }
    });
  }

function getSprite(sprite){
    if(!sprite) return;
    if(typeof(sprite) === 'function'){
      return sprite();
    } else if (typeof(sprite) === 'object'){
      if(sprite.getContext){
        return sprite;
      }
      return Utils.sprite('gradient',sprite)
    }
    return console.log('sprite的格式错误');
}

function getSpriteHash(sprite){
  if(typeof(sprite) === 'function'){
      return sprite.toString();
  } else {
    return JSON.stringify(sprite);
  }
}

var $ = require('jquery');
var ScatterCanvas = L.Class.extend({
  includes: [L.Mixin.Events],

  initialize: function (options) {
    options = this.options = Utils.deepMerge(ScatterCanvas.options, options);
    this.isable = true;
    this._getLng = options.lng;
    this._getLat = options.lat;
    this.updateSize(options.size);
    console.log(options.sprite);
    this.sprite = this.updateSprite(options.sprite);
    this.updateSelections(options.selections);
  },
  disable: function () {
    this.isable = false;
  },
  enable: function () {
    this.isable = true;
  },
  addTo: function (map) {
    if (this._map || !map) return;
    this._map = map;
    this.initCanvas();
    this.initEventsMap();
    this.updateBlending();
  },

  initCanvas: function () {
    var map = this._map;
    var options = this.options;
    var container = options.container;
    this.dCanvas = dmap.canvas(map, container, options);
  },
  
  /**
   * data 传入可视化数据
   * @param  {Object} _data 需要可视化的数据
   * @param  {Object} opt      配置参数
   */
  data: function (data, opt) {
    opt = opt || {};
    var map = this.map;
    var self = this;
    this._data = data;
    this.transfer = opt.transfer || function (lat, lng) { //将经纬度转化为平面坐标
      return self._map.latLngToContainerPoint(L.latLng(lat, lng));
    };
    this.valueFunc = function (d) {
      return d.value;
    } || opt.valueFunc; //从列表中提取展示数据的方式
  },
  updateSprite: function(sprite) {
    if(!sprite) return;
    // if (Array.isArray(sprite)) {
    //   for(var i in sprite){
    //     var sprit = sprite[i];
    //     var spriteHash = getSpriteHash(sprit);
    //     sprit = getSprite(sprit);
    //   }
    // } else {
    sprite = getSprite(sprite);
    return sprite;
    // }
  },
  updateSelections: function(selections){
    if(!selections) return;
    for(var i in selections){
      selection = selections[i];
      if(selection.sprite){
        selection.sprite = this.updateSprite(selection.sprite);
      }
    }
  },
  updateFilter: function(filter){
    if(!filter) return;
    this.options.filter = filter;
    this.draw();
  },

  updateSize: function(size) {
    if(!size) return;
    this._getSize = (typeof(size) === 'function') ? size: function(d){return size;};
    this.size = size;
  },
  updateBlending: function(mode) {
    var mode = this.options.mode = mode || this.options.mode;
    this.dCanvas.ctx.globalCompositeOperation = mode;
  },
  render: function (data) {
    if (data) this.data(data);
    this.draw();
  },
  draw: function () {
    this.clean();
    var map = this._map;
    var zoom = this._map.getZoom();
    var options = this.options;
    var isFilter = true;
    var filter = this.options.filter;
    if(!this.isable) return;
    var getSize = this._getSize;
    var transfer = this.transfer;
    var ds = this._data;
    var valueFunc = this.valueFunc;
    var sprite, sprites = this.sprites;
    var dCanvas = this.dCanvas;
    var getLng = this._getLng;
    var getLat = this._getLat;
    var w = dCanvas.w;
    var h = dCanvas.h;
    var d, lng, lat, pt, value, x, y, size;

    //
    var selections = options.selections;
    for (var k in ds) {
      d = ds[k];
      if (!d) continue;
      if (filter) isFilter = filter(d);
      if (!isFilter) continue;
      lng = getLng ? getLng(d) : d.lng;
      lat = getLat ? getLat(d) : d.lat;
      if (!lng || !lat) continue;
      pt = transfer(lat, lng);
      x = pt.x;
      y = pt.y;
      if (x < 0 || x > w || y < 0 || y > h) {
        continue;
      } else {
        if (selections) {
          for (var i in selections) {
            var selection = selections[i];
            size = selection.size(d, zoom);
            sprite = selection.sprite;
            if (size && sprite && selection.filter(d)) {
              dCanvas.pt(sprite, x, y, size);
              break;
            }
          }
        } else {
          sprite = this.sprite;
          dCanvas.pt(sprite, x, y, getSize(d, zoom));
        }
      }
    }
  },
  clean: function () {
    this.dCanvas.clear();
  },

  /**
   * initEventsMap 和地图移动绑定的事件
   */
  initEventsMap: function () {
    this.dCanvas.onUpdate(this.draw.bind(this));
  },

  /**
   * destroy  销毁canvas
   */
  destroy: function () {
    this.dCanvas.destroy();
  }
})

ScatterCanvas.options = {
    'lng': Utils.getLng,
    'lat': Utils.getLat,
    'size': function (d) {
      return 40;
    },
    'container': 'tilePane',
    'sprite': {
      'drawN': 1.15,
      'color': {
        'from': 'rgba(245,230,0,0)',
        'to': 'rgba(245,245,0,0)',
        'easing': 'Linear.None.1.7',
        'space': 'rgb'
      }
    }
  };

dmap.ScatterCanvas = ScatterCanvas;
dmap.scatterCanvas = function(opt) {
  return new ScatterCanvas(opt);
};

module.exports = ScatterCanvas;