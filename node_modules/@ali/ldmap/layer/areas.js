'use strict';

var L = require('leaflet');
var Model = require('@ali/map-data');
var Utils = require('@ali/map-utils');
var $ = require('jquery');
var normalizeData = Utils.normalizeData;
var colorMapping = Utils.blending('rgba(255,0,0,1)', 'rgba(133,0,252,0)', 'rgb', 'linear.In.1').toFunc();
var getFeatureBBox = Utils.getFeatureBBox;

var body = $('body');


/**
 * @class  Area
 * Area 绘制一个地理区域的方法
 * @param  {String} id 地理id
 * @param  {Object} opt 加载完成后的回调函数
 * @param  {Function} cb 整体配置

    {
      'mode': 'file',
      'map': map,
      'mouseover': null,//mouseover触发的函数
      'mousedown': function (e) {//mousedown触发的函数 这里为下钻
        var layer = e.target;
        var id = layer.id;
        this.map.fire('click-area', {
          'id': id,
          'layer': layer
        });
        vis.focus(layer);
        vis.select(layer.id);
        vis.render();
      }, //点击后触发的函数
      'clickMap': function () {//在地图区域（非svg内部）点击 此处的效果为 在空白区域点击下 地图缩放至全国视图
        vis.select('2210');
        vis.focusChina();
        vis.render();
      },
      'default': {//没有数据的区域的绘制方式
        'dashArray': [2, 6],
        'fillColor': 'hsla(210,70%,20%,0.8)',
        'color': 'hsla(210,10%,95%,0.5)',
        'strokeOpacity': 'hsla(210,50%,20%,0.9)',
        'fillOpacity': 0.9,
        'weight': 1
      },
      'visual': {//可视化区域的样式和数据的对应
        'colorizeFill': Utils.singleMapping({
          'h': 30,
          'sFrom': 20,
          'sTo': 100,
          'lFrom': 100,
          'lTo': 50
        })
      }
    }
 *    
 */
var Area = L.Class.extend({
  includes: [L.Mixin.Events],
  /**
   * @param  {String} id 地理id
   * @param  {Object} opt 加载完成后的回调函数
   * @param  {Function} cb 整体配置
   */
  initialize: function (id, opt, cb) {
    if (id === null || id === undefined) {
      return;
    }

    this.opt = opt = opt || {};
    this.cb = cb;
    var map = this.map = opt.map;

    var selectType = opt.selectType || 'area';
    var mode = opt.mode || 'file';
    var mapping = {
      'area.file': Model.getBoundByFile.bind(Model),
      'area.service': Model.getBoundByService.bind(Model),
      'children.file': Model.getChildrenBoundByFile.bind(Model),
      'children.service': Model.getChildrenBoundByService.bind(Model)
    };
    this.getBound = mapping[selectType + '.' + mode] || function () {};

    id && this.select(id);

    this.setOptions(opt);
    opt.clickMap && this.bindMap(opt.clickMap);
    opt.zoom && opt.zoom();
    this.addTo(map);
  },
  select: function (id) {
    this.selectedId = id;
    this.taskid = Math.random();
    if(id && this.layers){
      return this.layers[id];
    }
  },
  addTo: function (map) {
    this.map = map;
    this.events();
    this.render();
    return this;
  },
  events: function () {
    var self = this;
    var map = this.map;
    map.on('geojson-loaded', function (e) {
      if (self.taskid === e.taskid) {
        if (self.dataVisual) {
          self._visualize();
        }
      }
    });
  },
  clone: function (obj) {
    return JSON.parse(JSON.stringify(obj));
  },
  setOptions: function (opt) {
    var self = this;
    opt = opt || {};

    var styleDefault = this.styleDefault =
    $.extend({
      'color': '#008',
      'fillColor': '#009',
      'dashArray': [1, 6],
      'fillOpacity': 0.9
    }, opt.default || {});

    this.styleVisual =
    $.extend(
      $.extend(styleDefault, {
        'colorizeFill': colorMapping('single', {
          'h': 30,
          'sFrom': 20,
          'sTo': 100,
          'lFrom': 100,
          'lTo': 50
        })
      }), (opt.visual || {}));

    /*默认mouseover的效果*/
    this.mouseover = opt.mouseover || function (e) {
      var target = e.target;
      target.setStyle({
        'fillOpacity': 1,
        'strokeOpacity': 1
      });
    };
    /*默认mouseout的效果*/
    this.mouseout = opt.mouseout || function (e) {
      e.target.setStyle(e.target.curStyle);
    };
    /*默认mousedown的效果*/
    this.mousedown = opt.mousedown || function (e) {
      var target = e.target;
      var id = target.id;
      body.trigger('click-area', {
        'id': id,
        'layer': target
      });
    };
    /*默认点击弹出的效果*/
    this.floatTag = opt.floatTag || function (feature, layer) {
      var color = styleDefault.fillColor;
      layer.bindPopup('<b style="color:' + color + '">' + feature.properties.cName + '</b>', {
        'minWidth': 30,
        'closeButton': false,
        'autoPan': false,
        'autoPanPaddingTopLeft': [0, -100]
      });
    };
  },
  resetLayerStyle: function(){
    var layers = this.layers;
    for(var k in layers){
      layers[k].setStyle(layers[k].curStyle);
    }
  },
  onEachFeature: function (feature, layer) {//初始化的时候 对每个path进行的操作
    var id = feature.id;
    layer.id = id;
    layer.curStyle = this.styleDefault;
    this.layers[id] = layer;
    
    var mouseover = this.mouseover.bind(this);
    var mouseout = this.mouseout.bind(this);
    var floatTag = this.floatTag;
    var mousedown = this.mousedown.bind(this);

    if (mouseover) {
      layer.on('mouseover', mouseover);
    }
    if (mouseout) {
      layer.on('mouseout', mouseout);
    }
    if (mousedown) {
      layer.on('mousedown', mousedown);
    }
    if (floatTag) {
      floatTag(feature, layer);
    }
  },
  bindMap: function (func) {
    this.map.on('click', func);
  },
  /**
   * 导入数据
   * 数据格式应当为 {id1:{key1:xxx,key2:xxx},id2:{key1:xxx,key2:xxx}....}
   */
  data: function (ds, vKey) {
    this.dataVisual = normalizeData(ds, vKey);
  },
  visMapping: function (d, layer) {
    var styleVisual = JSON.parse(JSON.stringify(this.styleVisual)) || {};
    var colorizeFill = this.styleVisual.colorizeFill;
    var v = d.vFormat;
    styleVisual.fillColor = colorizeFill(v);
    layer.curStyle = styleVisual;
    layer.setStyle(styleVisual);
  },
  visualize: function () {
    if (this.layers) {
      this._visualize();
    }
  },

  render: function () {
    var self = this;
    var map = this.map;
    var id = this.selectedId;
    var cb = this.cb;

    var getBound = this.getBound;
    getBound(id, function (d) {
      if(!d || d.err) {return;}
      self.clear();
      self.geojson = d;
      self.layers = {};
      self.geojsonLayer = L.geoJson(d, {
          'style': self.styleDefault,
          'onEachFeature': self.onEachFeature.bind(self)
        })
        .addTo(map);
      map.fire('geojson-loaded', {
        'taskid': self.taskid
      });

      cb && cb(d);
    });
  },

  _visualize: function () {
    var dataVisual = this.dataVisual;
    var layers = this.layers;
    for (var id in dataVisual) {
      var d = dataVisual[id];
      var layer = layers[id];
      if (d && layer) {
        this.visMapping(d, layer);
      }
    }
  },
  /**
   * 把一个区域尽可能地放到某个矩形区域
   * @param {Object} layer 图层/或图层id
   * @param {Number} opt  地图
   */
  focus: function(layer, opt) {
    if (typeof(layer) === 'string') layer = this.layers[layer];
    var opt = opt || {
      'paddingTopLeft': [100, 100],
      'paddingBottomRight': [100, 100]
    };
    var bbox = getFeatureBBox(layer.feature);
    this.map.fitBounds(bbox, opt);
  },
  focusChina: function () {
    this.map.fitBounds(L.latLngBounds(L.latLng(19.090674, 68.491096), L.latLng(55.096524, 135.1629)));
  },
  /**
   * 清理场景
   */
  clear: function () {
    this.geojsonLayer && this.map.removeLayer(this.geojsonLayer);
  }
});

var dmap = L.dmap = L.dmap || {};
dmap.Area = Area;
dmap.area = function (id, opt, cb) {
  opt = opt || {};
  opt.selectType = 'area';
  return new dmap.Area(id, opt, cb);
};

dmap.children = function (id, opt, cb) {
  opt = opt || {};
  opt.selectType = 'children';
  return new dmap.Area(id, opt, cb);
};

module.exports = Area;
