/**
 * 地图数据处理相关
 */
'use strict';
var $ = require('jquery');
var EventProxy = require('eventproxy');
var config = require('./config.js');
var contains = config.contains;

/**
 * 将层状的包含数据展开成扁平的包含关系
 */
function flatten(result, d) {
  var id = d.id;
  var name = d.name;
  var sub = d.sub;
  var children = [];

  for (var k in sub) {
    var d1 = sub[k];
    children.push({
      name: d1.name,
      id: d1.id
    });
    flatten(result, d1);
  }
  result[id] = {
    name: name,
    children: children
  };
}

//将文件数据变成geojson格式
function featurefy(obj) {
  var name = obj.name;
  var bbox = obj.bound;
  var coordinate = obj.coordinate;
  var id = obj.id;
  var type = (coordinate && coordinate[0] && coordinate[0][0] && coordinate[0][0][0] && coordinate[0][0][0][0]) ? 'MultiPolygon' : 'Polygon';
  var features = {
    'type': 'Feature',
    geometry: {
      'coordinates': coordinate,
      'bbox': bbox,
      'type': type
    },
    'id': id,
    'properties': {
      'cName': name
    }
  };
  return features;
}


/**
 * 根据id返回对应的名字
 */
var Model = {
  'fileBase': config.file,
  'severBase': config.server,
  'getName': function(id) {
    var contain = contains[id];
    if (contain) {
      return contain.name;
    }
    return null;
  },

  /**
   * 根据id返回对应的区域所对应的下一级区域id 与 名字
   */
  'getChildrenInfo': function(id) {
    var contain = contains[id];
    if (contain) {
      return contain.children || [];
    }
    return [];
  },

  /**
   *根据文件读取geojson数据
   */
  'getChildrenBoundByFile': function(id, cb) {
    var ep = new EventProxy();

    var children = this.getChildrenInfo(id);
    var cLength = children.length;

    var features = [];

    function done() {
      var geojson = (cLength === 0) ? {
        err: '没有数据，可能是下钻到最小地理边界(区县级)'
      } : {
        'features': features,
        'type': 'FeatureCollection'
      };
      cb(geojson);
    }
    ep.after('area-loaded', cLength, done);

    function process(d) {
      if (d) features.push(d);
      ep.emit('area-loaded');
    }
    var cid, child;
    for (var k = 0; k < cLength; k++) {
      child = children[k];
      cid = child.id;
      this.getBoundByFile(cid, process);
    }
  },

  /**
   * 按照id获取此区域的地理数据
   */
  'getBoundByFile': function(id, cb) {
    $.ajax({
      'url': this.fileBase + id + '.json',
      'type': 'get',
      'jsonp': 'callback',
      // 'jsonpCallback': 'cb_boundary_' + id + '_geojson',
      'dataType': 'jsonp',
      'success': function(d) {
         var info = {
          id: d.id,
          name: d.name || d.cName || d.properties.cName
        };
        cb(d, info);
      },
      error: function(e){
        console.log(e);
      }
    });
  },

  'getBoundByService': function(id, cb) {
    var g;
    $.ajax({
      'url': this.severBase + 'geodata/area',
      'data': {
        'id': id,
        'returns': 'geojson'
      },
      'type': 'get',
      'jsonp': 'callback',
      'jsonpCallback': 'callback',
      'dataType': 'jsonp',
      'success': function(d) {
        d = d[0] || {};
        g = d.geojson;
        cb(g);
      }
    });
  },

  //通过接口，根据id获取某区域的geojson数据
  'getChildrenBoundByService': function(id, cb) {
    $.ajax({
      'url': this.severBase + 'geodata/children',
      'data': {
        'id': id,
        'returns': 'geojson'
      },
      'type': 'get',
      'jsonp': 'callback',
      'jsonpCallback': 'callback',
      'dataType': 'jsonp',
      'success': cb
    });
  }
};

module.exports = Model;
