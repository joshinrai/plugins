'use strict';
var eventEmitter = require('./../libs/event');
var Stream = require('./../core/stream');
var Util = require('./../core/utils');

/**
 * ## StreamLayer 流式数据管理 适合于轨等具有id的数据管理
 * @class StreamLayer
 */

function StreamLayer(opt) {
  this.initialize(opt);
}

StreamLayer = eventEmitter.extend(StreamLayer, {
  options:{
    stream:{
      getCellID: function(d){
        return d.id;
      }
    }
  },
  /**
   * stream 设置或取stream对象
   * @param  {Object} stream stream对象 负责数据管理
   */
  initialize: function (options) {
    options = this.options = Util.deepMerge(this.options, options);
    this.initVariables();
  },
  initVariables: function () {
    if (!this.options.visualize) throw '必须有visualize';
    this._dataObjects = {}; //当前与数据绑定的图元
    this._hideVisuals = []; //闲置的几何图元
    this.stream(this._stream || new Stream(this.options.stream));
  },
  stream: function (stream) {
    if (arguments.length === 0) return this._stream;
    this._stream = stream;

    var self = this,
      d, visual, object;
    stream
      .on('update-row', function (object) {
        self.updateRow(object);
      })
      .on('delete-row', function (object) {
        self.deleteRow(object);
      });
  },

  /**
   * data 传入数据
   * @param  {Object/Array} datas 传入数据
   */
  data: function (datas) {
    this._stream.write(datas);
  },

  /**
   * addHooksVisual 为可视图元加上hide事件 如果隐藏消失 可以放入回收队列
   * @param  visual 
   */
  addHooksVisual: function (visual) { //为visual组元添加事件
    var self = this;
    if (visual.hide) {
      visual.off('hide').on('hide', function () { //当元素完全隐藏的时候 触发回收机制
        return self._hideVisuals.push(visual);
      });
    }
  },

  /**
   * update 更新某对象时的方法
   * @param  {Object} object 数据对象
   */
  updateRow: function (object) {
    var visualize = this.options.visualize,
      visual;
    var data = object.data;
    if (object.visual) {
      return object.visual.updateData(data);
    }
    var hideVisuals = this._hideVisuals;
    if (hideVisuals.length) {
      visual = hideVisuals.pop();
    } else {
      visual = (typeof (visualize) === 'object') ? visualize : visualize(data);
      this.addHooksVisual(visual);
    }
    visual.data && visual.data(data); 
    object.visual = visual;
  },

  /**
   * delete 删除某对象时的方法
   * @param  {Object} object 数据对象
   */
  deleteRow: function (object) {
    var id = object.id;
    var visual = object.visual;
    if (visual.hide) {
      return visual.hide();
    } else if (visual.destroy) {
      if (!this.options.isDeleteDiff) return;
      return visual.destroy();
    } else {
      throw 'visualize方法必须有 hide / destroy 之一的方法';
    }
  },

  /**
   * delete 销毁自身的方法
   */
  destroyAll: function () {
    if (this.options.isHide) {
      var hideVisuals = this._hideVisuals;
    }
    this.stream.destroy();
  }
});

module.exports = StreamLayer;