var $ = require('jquery');
var L = require('leaflet');
var Utils = require('./../core/utils');
var Events = require('bcore/event');
require('keyanim');
require('./visual_selector.css');

function Selector(container, options) {
  options = this.options = Utils.deepMerge(Selector.options, options);
  this.initialize(container, options);
  this.selected = {};
}
Selector.options = {
  style: {
    left: '30%',
    top: '10%'
  },
  grid: {
    height: '50px',
    lineHeight: '50px'
  },
  mode: 'multiple', //'single',
  selects: [{
    name: '测试2',
    filter: function (d) {
      return true;
    }
  }, {
    name: '测试1',
    filter: function (d) {
      return true;
    }
  }]
};

Selector = Events.extend(Selector, {
  initialize: function (container, options) {
    if (container) {
      this.container = container;
      this.initDom();
    }
  },
  linkTo: function (visual) {
    if (!visual) return;
    this.visual = visual;
    var options = visual.options;
    var selections = this.selections = options.selections;
  },
  addTo: function (map) {
    this._map = map;
    this.container = $(map.getUIContainer());
    this.initDom();
    this.initEvents();
  },
  initDom: function () {
    var options = this.options;
    var container = this.container;
    var mainNode = this.mainNode = $('<div class="visual-selector"><div>')
      .css(options.style)
      .appendTo(container);
  },
  render: function () {
    var options = this.options;
    var selections = this.selections;
    console.log(selections);
    var selection;
    for (var i in selections) {
      selection = selections[i];
      var gridNode = this.renderGrid(selection, i);
      this.initEventsGrid(gridNode);
    }
  },
  renderGrid: function (selection, k) {
    var gridOpt = this.options.grid ||{}
    var node = $('<div class="grid" id="' + k + '">' + selection.name + '</div>')
    .css(gridOpt)
    .appendTo(this.mainNode);
    return node;
  },
  initEventsGrid: function (grid) {
    var self = this;
    var options = this.options;
    grid.on('click', function () {
      var id = grid.attr('id');
      if (options.mode === 'single'){
        self.curGird && self.curGird.removeClass('grid-selected');
        self.curGird = grid.addClass('grid-selected');
        var selected = self.selected = {};
        selected[id] = true;
      }
      if (options.mode === 'multiple') {
        var selected = self.selected;
        if (grid.hasClass('grid-selected')) {
          delete selected[id];
          grid.removeClass('grid-selected');
        } else {
          selected[id] = 1;
          grid.addClass('grid-selected');
        }
      }
      self.emit('select-change', id);
    });
  },
  initDomGrid: function () {
    var html = '';
  },
  initEvents: function () {
    this.on('select-change', function (id) {
      var options = this.options;
      var mode = options.mode;
      var visual = this.visual;
      var selections = this.selections;
      var selected = this.selected;

      var filter;
      if (mode === 'single') {
        var selection = selections[id];
        if (!selection) return;
        filter = selection.filter;
        if (filter) {
          visual.updateFilter && visual.updateFilter(filter);
        }
      } else if (mode === 'multiple') {
        filter = function (d){
          for (var id in selected){
            var selection = selections[id];
            if (selection.filter(d)) return true;
          }
          return false;
        };
        visual.updateFilter && visual.updateFilter(filter);
      }
      this.emit('filter-change', filter);
    });
  },
  data: function () {}
})
module.exports = Selector;