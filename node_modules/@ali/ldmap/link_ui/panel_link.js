'use strict';
var eventEmitter = require('./../libs/event');
var Util = require('./../core/utils');
var $ = require('jquery');
require('./lib/anim');
var prevent = Util.prevent;
var linkUtil = require('./utils');
var body = $('body');
require('./lib/animate.min.css');
var stopPropagation = function(e){return e.stopPropagation();};

//
function PanelLink(container, opt) {
  this.initialize(container, opt);
}

eventEmitter.extend(PanelLink, {
  options: {
    isOut: true
  },
  initialize: function (container, options) {
    this.options = Util.deepMerge(this.options, options);
    this.isOut = this.options.isOut;
    this.container = container || body;
    this.initDom();
    this.inputs = ['x'];
    this.initEvents();
  },
  initEvents: function(){
    var self = this;
    var submitButton = this.submitButton;
    var errorsNode = this.errorsNode; 
    this.on('function-done', function(){
      submitButton.addClass('submit-button-active');
    });
    this.textarea.on('input propertychang', function(){
      var func = linkUtil.createFunction({
        inputs: self.inputs,
        body: $(this).val()
      });
      if(typeof(func) === 'function'){
        submitButton.removeClass('submit-button-error').addClass('submit-button-active');
        errorsNode.text('');
      } else {
        submitButton.removeClass('submit-button-active').addClass('submit-button-error');
        errorsNode.text(func);
      }
    });
    //
    this.container.on('mousedown touchstart', stopPropagation);
    this.textarea.on('mousedown touchstart', stopPropagation);
    submitButton.on('mousedown touchstart', stopPropagation);
    this.initEventsGlobal();
  },
  initEventsGlobal: function(){
    window.linkUIGlobal && linkUIGlobal.on('panel_com_tap', this.out.bind(this));
  },
  initDom: function(){
    var container = this.container;
    $('\
      <div class="link-panel-bg"></div>\
      <div class="link-panel">\
        <div class="link-symbol margin">\
          <div class="from">\
            <div class="circle"></div>\
          </div>\
          <div class="link"><span>➣</span></div>\
          <div class="to">\
            <div class="circle"></div>\
          </div>\
        </div>\
        <textarea type="text" alt="text" placeholder="请在区域输入函数 如 return x*x;.." class="text-input margin" value="haha"/>\
        <div class="submit-area margin">\
          <div class="errors"></div>\
          <div class="submit-button transition">提交</div>\
        </div>\
      </div>\
      ')
    .appendTo(container);
    
    this.bg = container.find('.link-panel-bg');
    this.panel = container.find('.link-panel');
    this.submitButton = this.panel.find('.submit-button');
    this.textarea = container.find('textarea');
    this.errorsNode = container.find('.errors');
  },
  out: function(){
    if(this.isOut) return;
     this.bg
     .keyAnim('fadeOut', {
      time: 0.3
    });
     this.panel
     .keyAnim('fadeOutLeft', {
      time: 0.3
    });
    this.isOut = true;
  },
  in: function(){
    if(!this.isOut) return;
    this.bg
    .keyAnim('fadeIn', {
      time: 0.1
    });
    this.panel
    .keyAnim('fadeInLeft', {
      time: 0.1
    });
    this.isOut = false;
  },
  clear: function(){//清空所有的链接
    this.errorsNode.empty();
    this.textarea.empty();
  }
});

module.exports = PanelLink;