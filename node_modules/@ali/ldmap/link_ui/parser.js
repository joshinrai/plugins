'use strict';
var eventEmitter = require('./../libs/event');
var Util = require('./../core/utils');

/**
 * ## Parser 解析地图组件
 * @class Parser
 */

function Parser(options) {
  this.initialize(options);
}

eventEmitter.extend(Parser, {
  options: {
    originalMethods:{
      addOneTimeEventListener: true,
      fireEvent: true,
      clearAllEventListeners: true,
      removeEventListener: true,
      hasEventListeners: true,
      addEventListener: true,
      constructor: true,
      callInitHooks: true,
      options: true,
      fire: true,
      once: true,
      off: true,
      on: true,
    }
  },
  initialize: function (options) {
    Util.deepMerge(this, options);
  },
  parse: function(component){
    if(!component) return;
    //
    this.methodsUpdate = {};
    this.methods = {};
    this.funcsGet = {};
    //
    var originalMethods = this.options.originalMethods;
    //解析 options
    var options = component.options || component.__proto__.options;
    this.parseOptions(options);

    var emits = component.emits;
    this.parseEmits(emits);
    //解析 proto
    var proto = component.__proto__;
    for(var key in proto){
      var method = proto[key];
      if(key in originalMethods) continue;
      if(typeof(method)!== 'function'){
        // console.log(key, method);
      } else {   
        this.parseMethod(key, method)
      }
    }
    return {
      component: component,
      updates: this.methodsUpdate,
      methods: this.methods,
      data2format: this.funcsGet,
      shapes: this.methodsUpdate
    };
    // this.emit('parse-done', {
    // });
  },
  parseMethod: function(key, method) {
    this.methods[key] = method;
    if(key.indexOf('update') !== -1 && key[0] !== '_') this.methodsUpdate[key] = method;
  },
  parseOptions: function(options){
    var obj, funcsGet = this.funcsGet;
    for(var k in options){
      obj = options[k];
      if(typeof obj === 'function' && k.indexOf('get') !== -1){
        funcsGet[k] = obj;
      }
    }
    // console.log('解析后的options:', options);
  },
  parseEmits: function(emits){
    this.emits = emits;
  }
});


function parser(options){
  return new Parser(options);
}

module.exports = parser;
