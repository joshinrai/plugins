'use strict';
var eventEmitter = require('./../libs/event');
var Util = require('./../core/utils');
var $ = require('jquery');

function Link(svg, options) {
  this.initialize(svg, options);
}

eventEmitter.extend(Link, {
  isDelete: 0,
  options:{
    x:0,
    y:0,
    line:{
      styles:{
        'transition': '0.1s all ease-in-out',
        '-webkit-transition': '0.1s all ease-in-out',
        'pointer-events': 'auto'
      },
      update:{
        'stroke-width': 2,
        'fill': 'none',
        'stroke': 'rgba(0,150,150,0.6)',
        'stroke-dasharray': '2, 8',
        'stroke-linecap': 'round'
      },
      end: {
        'stroke-width': 6,
        'stroke-dasharray': 'none',
        'colorfrom': 'rgba(150,0,150,1)',
        'colorto': 'rgba(0,150,150,1)'
      },
      mouseover: {
        'stroke-opacity': '0.8',
      },
      mouseout: {
        'stroke-opacity': '1',
      },
      weight: 2,
    }
  },
  initialize: function (svg, options) {
    this.svg = svg;
    this.options = Util.deepMerge(this.options, options);
    this.begin(options.x, options.y);
    this.initGradient();
  },
  begin: function (x, y) {
    var line = this.options.line;
    var update = line.update;
    var styles = line.styles;
    var stop1 = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    line = this.line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    line.setAttribute('x1', x);
    line.setAttribute('y1', y);
    line.setAttribute('x2', x + 0);
    line.setAttribute('y2', y + 0);
    for(var key in update){
      line.setAttribute(key, update[key]);
    }
    for(var i in styles){
      line.style[i] = styles[i];
    }
    this.svg.appendChild(line);
  },
  update: function(x, y){
    this.line.setAttribute('x2', x);
    this.line.setAttribute('y2', y);
  },
  modify: function(x1, y1, x2, y2){
    this.line.setAttribute('x1', x1);
    this.line.setAttribute('y1', y1);
    this.line.setAttribute('x2', x2);
    this.line.setAttribute('y2', y2);
  },
  break: function(){
    this.destory();
  },
  destory:function(){
    try{
      this.svg.removeChild(this.line);
    }catch(e){
    }
  },
  end: function(node){
    var end = this.options.line.end;
    var line = this.line;
    for(var k in end){
      line.setAttribute(k, end[k]);
    }
    line.setAttribute('stroke', 'url(#link-line)');
    this.initEvents();
    setTimeout(function(){
      this.emit('link-end');
    }.bind(this));
  },
  initGradient: function(){
    var end = this.options.line.end;
    var svg = document.getElementsByTagName('svg')[0];
    if(!svg) return console.log('svg节点尚未建立');

    var stop1a, stop1b, stop1c;
    var defs = document.getElementsByTagName('defs')[0];
    if (!defs) {
      defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
      svg.appendChild(defs);
    }
    var linearGradient = this.linearGradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
    linearGradient.setAttribute('id', 'link-line');
    linearGradient.setAttribute('x1', '0%' );
    linearGradient.setAttribute('y1', '0%' );
    linearGradient.setAttribute('x2', '100%' );
    linearGradient.setAttribute('y2', '0%' );
    defs.appendChild(linearGradient);
    //
    var stopFrom = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    stopFrom.setAttribute('id', 'link-line-from');
    stopFrom.setAttribute('offset', '0%');
    stopFrom.setAttribute('stop-color', end.colorfrom);
    linearGradient.appendChild(stopFrom);
    //
    var stopTo = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
    stopTo.setAttribute('id', 'link-line-to');
    stopTo.setAttribute('offset', '100%');
    stopTo.setAttribute('stop-color', end.colorto);
    linearGradient.appendChild(stopTo);
  },
  initEvents: function() {
    var line = this.options.line;
    var mouseover = line.mouseover, mouseout = line.mouseout;
    line = this.line;
    $(line)
    .on('mouseover', function(){
      for(var k in mouseover){
        line.setAttribute(k, mouseover[k]);
      }
    })
    .on('mouseout', function(){
      for(var k in mouseout){
        line.setAttribute(k, mouseout[k]);
      }
    });
  }
});

module.exports = Link;