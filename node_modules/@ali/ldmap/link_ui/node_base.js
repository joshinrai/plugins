'use strict';
var eventEmitter = require('./../libs/event');
var Util = require('./../core/utils');
var $ = require('jquery');
var prevent = Util.prevent;
var getPt = Util.getPt;

/**
 * ## Node 编辑节点
 * @class Node
 */

function Node(container, options) {
  this.initialize(container, options);
}

eventEmitter.extend(Node, {
  isLinking: false,
  initialize: function (container, options) {
    this.options = Util.deepMerge({
    type: 'data'
    }, options);
    this.container = container;
    this.initDom();
    this.initEvents();
  },
  initDom: function () {
    var options = this.options;
    var classname = 'node-' + options.type;
    var nodeContainer = this.nodeContainer = $('\
      <div class="node ' + classname + '">' + options.text + '\
        <div class="dot-left ' + classname + '"></div>\
        <div class="dot-right ' + classname + '"></div>\
      </div>'
      )
    .appendTo(this.container);
    this.leftNode = nodeContainer.find('.dot-left');
    this.rightNode = nodeContainer.find('.dot-right');
    window.rightNode = this.rightNode;
  },
  initEvents: function(){
    var isDown = false, self = this;
    var nodeContainer = this.nodeContainer;
    var pt;
    nodeContainer
    .on('mousedown touchstart', function(e){
      e.preventDefault();
      isDown = true;
      e.preventD
    })
    .on('mousemove touchmove', function(e){
      window.linkUIGlobal && linkUIGlobal.trigger('node-over', self);
      e.preventDefault();
      if(!isDown) return;
      window.linkUIGlobal && linkUIGlobal.trigger('node-action', self);
    })
    .on('mouseup touchend', function(e){
      e.preventDefault();
      isDown = false;
      self.isLinking = false;
    })
    .on('mouseout touchleave', function(e){
      e.preventDefault();
      window.linkUIGlobal && linkUIGlobal.trigger('node-leave', this);
    });
  },
  getPosition: function(){
    var leftNode = this.leftNode;
    var leftRect = leftNode[0].getBoundingClientRect();
    var rightNode = this.rightNode;
    var rightRect = rightNode[0].getBoundingClientRect();
    var r = leftNode.width() / 2;
    return {
      left: {
        left: leftRect.left + r,
        top: leftRect.top + r
      },
      right: {
        left: rightRect.left + r,
        top: rightRect.top + r
      }
    };
  },
  getType: function(){
    return this.options.type;
  }
});

module.exports = Node;