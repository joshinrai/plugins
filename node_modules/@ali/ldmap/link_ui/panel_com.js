'use strict';
var eventEmitter = require('./../libs/event');
var Util = require('./../core/utils');
var prevent = Util.prevent;
var getPt = Util.getPt;
var $ = require('jquery');
var parser = require('./parser');
var Node = require('./node');
var SubNode = require('./sub_node');
require('./gui.css');
var linkUIGlobal = require('./link_ui_global');
var Link = require('./link');
var LinkProcess = require('./link_process');
var PanelLink = require('./panel_link');
// var snap = require('snap');
/**
 * ## Visualer 组件编辑面板
 * @class Visualer
 */

function cutString(str, N){
  if(str.length < N) return str;
  return str.substring(0, N)
}

var body = $('body');
function Visualer(container, opt) {
  this.initialize(container, opt);
}

eventEmitter.extend(Visualer, {
  options: {
  },
  initialize: function (container, options) {
    this.options = Util.deepMerge(this.options, options);
    this.container = container || body;
    this.initDom();
    this.parser = parser();//解析组件
    this.linkProcess = new LinkProcess();//运行组件
    this.panelLink = new PanelLink(this.visualerContainer, {});
    this.initEvents();
  },
  initEvents: function(){
    this.initEventsDrag();
    this.on('link-processing', function(d){//完成link后 处理需求
      this.linkProcess.process(d);
    })
  },
  parseData: function(ds){
    var key, d;
    for(key in ds){
      d = ds[key];
      break;
    }
    this.renderDataColumn({
      key: key,
      values: d
    });
  },
  parse: function (component) {
    this.linkProcess.linkTo(component);
    var info = this.parser.parse(component);
    this.renderDataFormatedColumn(info.data2format);
    this.renderShapeColumn(info.shapes);
  },
  initDom: function(){
    var node = this.visualerContainer = $('\
      <div class="component-visualer">\
       \
        <div class="data-column column">\
          <div class="header">原始数据</div>\
          <div class="nodes">\
            <div class="data-group"></div>\
          </div>\
        </div>\
       \
        <div class="formated-column column">\
          <div class="header">标准化数据</div>\
          <div class="nodes"></div>\
        </div>\
        \
        <div class="shape-column column">\
          <div class="header">图形</div>\
          <div class="nodes"></div>\
        </div>\
      </div>'
    ).appendTo(this.container);
    this.dataColumn = node.find('.data-group');
    this.formatedColumn = node.find('.formated-column').find('.nodes');
    this.shapeColumn = node.find('.shape-column').find('.nodes');
    //
    setTimeout(this.initSvg.bind(this));
  },
  initSvg: function(){
    var container = this.visualerContainer;
    var svg = this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.setAttribute('width', container.width());
    svg.setAttribute('height', container.height());
    svg.style.position = 'absolute';
    svg.style.left = '0';
    svg.style.top = '0';
    svg.style.width = '100%';
    svg.style.height = '100%';
    svg.style.zIndex = 1;
    svg.style.pointerEvents = 'none';
    container[0].appendChild(svg);
  },
  renderDataColumn: function(dataInfo){
    var mainKey = dataInfo.key, value, values = dataInfo.values;
    var dataColumn = this.dataColumn;
    var visualerContainer = this.visualerContainer;
    var mainKeyNode = new Node(dataColumn, {
      type: 'data',
      text: dataInfo.key,
      mainContainer: visualerContainer
    });
    for(var i in values){
      value = values[i];
      new SubNode(dataColumn, {
        type: 'data',
        text: i + ': ' + cutString(value.toString(), 7),
        mainContainer: visualerContainer
      });
    }
  },
  renderDataFormatedColumn: function(data2format){
    var formatedColumn = this.formatedColumn;
    var visualerContainer = this.visualerContainer;
    for(var key in data2format){
      var func = data2format[key];
      new Node(formatedColumn,{
        type: 'data-formated',
        text: key,
        mainContainer: visualerContainer
      });
    }
  },
  renderShapeColumn: function(shape){
    var visualerContainer = this.visualerContainer;
    var shapeColumn = this.shapeColumn;
    for(var key in shape){
      var s = shape[key];
      new Node(shapeColumn, {
        type: 'shape',
        text: key,
        mainContainer: visualerContainer
      })
    }
  },
  initEventsLink: function(link){
    if(!link) return console.log('没有link');
    var panelLink = this.panelLink;
    link.on('link-end', function(){
      panelLink.clear();
      panelLink.in();
    });
  },
  initEventsDrag: function(){
    var self = this, isDown = false;
    this.isLinking = false;
    var link, ptS, line;
    var firstNode, secondNode;

    window.linkUIGlobal && linkUIGlobal
    .on('node-action', function (node) {
      if(!self.isLinking){
        self.isLinking = true;
        firstNode = node;
      }
    }).on('node-over', function (node) {
      if(self.isLinking){
        secondNode = node;
      }
    })
    .on('node-leave', function(node){
      if(secondNode === node){
        secondNode = null;
      }
    });

    var visualerContainer = this.visualerContainer;
    visualerContainer
    .on('mousedown touchstart', function(e){
      if(e.target === $(this)[0])  window.linkUIGlobal && linkUIGlobal.trigger('panel_com_tap');
      // prevent(e);
      ptS = self.ptS = getPt(e, visualerContainer);
      isDown = true;
      link = new Link(self.svg, {
        x: ptS[0],
        y: ptS[1]
      });
      self.initEventsLink(link);
    })
    .on('mousemove touchmove', function(e){
      // prevent(e);
      if(!isDown) return;
      if(self.isLinking){
        self.emit('add-link');
        self.isLinking = true;
        var pt = getPt(e, visualerContainer);
        link.update(pt[0], pt[1]);
      }
    })
    .on('mouseup touchend', function(e){///////////////不要prevent 造成无法输入/////////
      // prevent(e);
      isDown = false;
      self.isLinking = false;
      if(secondNode){
        self.emit('link-processing', {
          from: firstNode,
          to: secondNode,
          link: link
        });
        link.end(secondNode);
      } else {
        link.break();
      }
      firstNode = null;
      secondNode = null;
    });
  }
});

module.exports = Visualer;